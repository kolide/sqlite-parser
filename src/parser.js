// Generated by PEG.js 0.10.0.
//
// http://pegjs.org/

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = expectation.parts.map(function(part) {
            return Array.isArray(part)
              ? classEscape(part[0]) + "-" + classEscape(part[1])
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$DefaultTracer() {
  this.indentLevel = 0;
}

peg$DefaultTracer.prototype.trace = function(event) {
  var that = this;

  function log(event) {
    function repeat(string, n) {
       var result = "", i;

       for (i = 0; i < n; i++) {
         result += string;
       }

       return result;
    }

    function pad(string, length) {
      return string + repeat(" ", length - string.length);
    }

    if (typeof console === "object") {
      console.log(
        event.location.start.line + ":" + event.location.start.column + "-"
          + event.location.end.line + ":" + event.location.end.column + " "
          + pad(event.type, 10) + " "
          + repeat("  ", that.indentLevel) + event.rule
      );
    }
  }

  switch (event.type) {
    case "rule.enter":
      log(event);
      this.indentLevel++;
      break;

    case "rule.match":
      this.indentLevel--;
      log(event);
      break;

    case "rule.fail":
      this.indentLevel--;
      log(event);
      break;

    default:
      throw new Error("Invalid event type: " + event.type + ".");
  }
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleIndices = { start: 0, start_streaming: 1 };
  var peg$startRuleIndex = 0;

  var peg$consts = [
    function(s) {
        return s;
      },
    function(f, b) {
        return {
          'type': 'statement',
          'variant': 'list',
          'statement': flattenAll([ f, b ])
        };
      },
    function(s) { return s; },
    peg$otherExpectation("Type Definition"),
    function(t, a) {
        return Object.assign(t, a);
      },
    function(n) {
        return {
          'type': 'datatype',
          'variant': n[0],
          'affinity': n[1]
        };
      },
    peg$otherExpectation("Custom Datatype Name"),
    function(t, r) {
        const variant = foldStringKey([ t, r ]);
        let affinity = 'numeric';
        if (/int/i.test(variant)) {
          affinity = 'integer';
        } else if (/char|clob|text/i.test(variant)) {
          affinity = 'text';
        } else if (/blob/i.test(variant)) {
          affinity = 'blob';
        } else if (/real|floa|doub/i.test(variant)) {
          affinity = 'real';
        }
        return {
          'type': 'datatype',
          'variant': variant,
          'affinity': affinity
        };
      },
    /^[\t ]/,
    peg$classExpectation(["\t", " "], false, false),
    function(w) {
        return w;
      },
    peg$otherExpectation("Type Definition Arguments"),
    function(a1, a2) {
        return {
          'args': {
            'type': 'expression',
            'variant': 'list',
            'expression': flattenAll([ a1, a2 ])
          }
        };
      },
    function(n) { return n; },
    peg$otherExpectation("Null Literal"),
    function(n) {
        return {
          'type': 'literal',
          'variant': 'null',
          'value': keyNode(n)
        };
      },
    peg$otherExpectation("Date Literal"),
    function(d) {
        return {
          'type': 'literal',
          'variant': 'date',
          'value': keyNode(d)
        };
      },
    peg$otherExpectation("String Literal"),
    function(n, s) {
        return {
          'type': 'literal',
          'variant': 'text',
          'value': s
        };
      },
    peg$otherExpectation("Single-quoted String Literal"),
    function(s) {
        /**
         * @note Unescaped the pairs of literal single quotation marks
         */
        /**
         * @note Not sure if the BLOB type should be un-escaped
         */
        return unescape(s, "'");
      },
    "''",
    peg$literalExpectation("''", false),
    /^[^']/,
    peg$classExpectation(["'"], true, false),
    peg$otherExpectation("Blob Literal"),
    /^[x]/i,
    peg$classExpectation(["x"], false, true),
    function(b) {
        return {
          'type': 'literal',
          'variant': 'blob',
          'value': b
        };
      },
    function(n) {
        return {
          'type': 'literal',
          'variant': 'text',
          'value': n
        };
      },
    peg$otherExpectation("Number Sign"),
    function(s, n) {
        if (isOkay(s)) {
          n['value'] = foldStringWord([ s, n['value'] ]);
        }
        return n;
      },
    function(d, e) {
        return {
          'type': 'literal',
          'variant': 'decimal',
          'value': foldStringWord([ d, e ])
        };
      },
    peg$otherExpectation("Decimal Literal"),
    function(f, b) { return foldStringWord([ f, b ]); },
    function(t, d) { return foldStringWord([ t, d ]); },
    peg$otherExpectation("Decimal Literal Exponent"),
    "e",
    peg$literalExpectation("E", true),
    /^[+\-]/,
    peg$classExpectation(["+", "-"], false, false),
    function(e, s, d) { return foldStringWord([ e, s, d ]); },
    peg$otherExpectation("Hexidecimal Literal"),
    "0x",
    peg$literalExpectation("0x", true),
    function(f, b) {
        return {
          'type': 'literal',
          'variant': 'hexidecimal',
          'value': foldStringWord([ f, b ])
        };
      },
    /^[0-9a-f]/i,
    peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
    /^[0-9]/,
    peg$classExpectation([["0", "9"]], false, false),
    peg$otherExpectation("Bind Parameter"),
    function(b) {
        return Object.assign({
          'type': 'variable'
        }, b);
      },
    peg$otherExpectation("Numbered Bind Parameter"),
    function(q, id) {
        return {
          'format': 'numbered',
          'name': foldStringWord([ q, id ])
        };
      },
    /^[1-9]/,
    peg$classExpectation([["1", "9"]], false, false),
    function(f, r) {
        return foldStringWord([ f, r ]);
      },
    peg$otherExpectation("Named Bind Parameter"),
    /^[:@]/,
    peg$classExpectation([":", "@"], false, false),
    function(s, name) {
        return {
          'format': 'named',
          'name': foldStringWord([ s, name ])
        };
      },
    peg$otherExpectation("TCL Bind Parameter"),
    "$",
    peg$literalExpectation("$", false),
    ":",
    peg$literalExpectation(":", false),
    function(d, name, s) {
        return Object.assign({
          'format': 'tcl',
          'name': foldStringWord([ d, name ])
        }, s);
      },
    function(sfx) {
        return {
          'suffix': sfx
        };
      },
    peg$otherExpectation("Window Function's Over Clause"),
    function(t) {
        return { 'variant': 'window', 'over': t };
      },
    function(b, part, order) {
       return Object.assign({'type': 'window definition', 'description': 'window definition'}, b, part, order)
     },
    function(n) { return {'base_window_name': n } },
    function(n) { return {type: 'identifier', 'variant': 'window-name', 'name': n} },
    peg$otherExpectation("Partition By clause"),
    function(e) {
        return { 'partition':  { 'expression': e } };
      },
    peg$otherExpectation("EXISTS Expression"),
    function(n, e) {
        if (isOkay(n)) {
          return {
            'type': 'expression',
            'format': 'unary',
            'variant': 'exists',
            'expression': e,
            'operator': keyNode(n)
          };
        }
        return e;
      },
    peg$otherExpectation("EXISTS Keyword"),
    function(n, x) { return foldStringKey([ n, x ]); },
    peg$otherExpectation("RAISE Expression"),
    function(s, a) {
        return Object.assign({
          'type': 'expression',
          'format': 'unary',
          'variant': keyNode(s),
          'expression': a
        }, a);
      },
    peg$otherExpectation("RAISE Expression Arguments"),
    function(a) {
        return Object.assign({
          'type': 'error'
        }, a);
      },
    peg$otherExpectation("IGNORE Keyword"),
    function(f) {
        return {
          'action': keyNode(f)
        };
      },
    function(f, m) {
        return {
          'action': keyNode(f),
          'message': m
        };
      },
    function(n) {
        return n;
      },
    function(e, c) {
        return Object.assign(c, {
          'expression': e
        });
      },
    function(op, e) {
        return {
          'type': 'expression',
          'format': 'unary',
          'variant': 'operation',
          'expression': e,
          'operator': keyNode(op)
        };
      },
    peg$otherExpectation("COLLATE Expression"),
    function(c) {
        return Object.assign({
          'type': 'expression',
          'format': 'unary',
          'variant': 'operation',
          'operator': 'collate'
        }, c);
      },
    function(f, rest) { return composeBinary(f, rest); },
    function(i) {
        return [null, i, null, {
          'type': 'literal',
          'variant': 'null',
          'value': 'null'
        }];
      },
    "not ",
    peg$literalExpectation("NOT ", true),
    "null",
    peg$literalExpectation("NULL", true),
    function() { return 'not'; },
    function() { return 'is'; },
    peg$otherExpectation("CAST Expression"),
    function(s, e, a) {
        return {
          'type': 'expression',
          'format': 'unary',
          'variant': keyNode(s),
          'expression': e,
          'as': a
        };
      },
    peg$otherExpectation("Type Alias"),
    function(d) { return d; },
    peg$otherExpectation("CASE Expression"),
    function(t, e, w, s) {
        return Object.assign({
          'type': 'expression',
          'variant': keyNode(t),
          'expression': flattenAll([ w, s ])
        }, e);
      },
    function(e) {
        return {
          'discriminant': e
        };
      },
    peg$otherExpectation("WHEN Clause"),
    function(s, w, t) {
        return {
          'type': 'condition',
          'variant': keyNode(s),
          'condition': w,
          'consequent': t
        };
      },
    peg$otherExpectation("ELSE Clause"),
    function(s, e) {
        return {
          'type': 'condition',
          'variant': keyNode(s),
          'consequent': e
        };
      },
    function(v, p) {
        return Object.assign(p, {
          'left': v
        });
      },
    peg$otherExpectation("Comparison Expression"),
    function(n, m, e, x) {
        return Object.assign({
          'type': 'expression',
          'format': 'binary',
          'variant': 'operation',
          'operation': foldStringKey([ n, m ]),
          'right': e
        }, x);
      },
    peg$otherExpectation("ESCAPE Expression"),
    function(s, e) {
        return {
          'escape': e
        };
      },
    peg$otherExpectation("BETWEEN Expression"),
    function(n, b, tail) {
        return {
          'type': 'expression',
          'format': 'binary',
          'variant': 'operation',
          'operation': foldStringKey([ n, b ]),
          'right': tail
        };
      },
    function(f, rest) { return composeBinary(f, [ rest ]); },
    function(n) { return keyNode(n); },
    peg$otherExpectation("IN Expression"),
    function(n, i, e) {
        return {
          'type': 'expression',
          'format': 'binary',
          'variant': 'operation',
          'operation': foldStringKey([ n, i ]),
          'right': e
        };
      },
    function(e) { return e; },
    peg$otherExpectation("Expression List"),
    function(l) {
        return {
          'type': 'expression',
          'variant': 'list',
          'expression': isOkay(l) ? l : []
        };
      },
    function(f, rest) {
        return flattenAll([ f, rest ]);
      },
    peg$otherExpectation("Function Call"),
    function(n, a, over) {
        return Object.assign({
          'type': 'function',
          'name': n,
        }, a, over);

      },
    peg$otherExpectation("Function Call Arguments"),
    function(s) {
        return {
          'args': {
            'type': 'identifier',
            'variant': 'star',
            'name': s
          }
        };
      },
    function(d, e) {
        return !isOkay(d) || e['expression'].length > 0;
      },
    function(d, e) {
        return {
          'args': Object.assign(e, d)
        };
      },
    function(s) {
        return {
          'filter': keyNode(s)
        };
      },
    peg$otherExpectation("Error Message"),
    function(m) { return m; },
    peg$otherExpectation("Statement"),
    function(m, s) {
        return Object.assign(s, m);
      },
    peg$otherExpectation("QUERY PLAN"),
    function(e, q) {
        return {
          'explain': isOkay(e)
        };
      },
    peg$otherExpectation("QUERY PLAN Keyword"),
    function(q, p) { return foldStringKey([ q, p ]); },
    peg$otherExpectation("END Transaction Statement"),
    function(s, t) {
        return {
          'type': 'statement',
          'variant': 'transaction',
          'action': 'commit'
        };
      },
    peg$otherExpectation("BEGIN Transaction Statement"),
    function(s, m, t, n) {
        return Object.assign({
          'type': 'statement',
          'variant': 'transaction',
          'action': 'begin'
        }, m, n);
      },
    function(t) { return t; },
    function(m) {
        return {
          'defer': keyNode(m)
        };
      },
    peg$otherExpectation("ROLLBACK Statement"),
    function(s, n) {
        return Object.assign({
          'type': 'statement',
          'variant': 'transaction',
          'action': 'rollback'
        }, n);
      },
    peg$otherExpectation("TO Clause"),
    function(n) {
        return {
          'savepoint': n
        }
      },
    function(s) { return keyNode(s); },
    peg$otherExpectation("SAVEPOINT Statement"),
    function(s, n) {
        return {
          'type': 'statement',
          'variant': s,
          'target': n
        };
      },
    peg$otherExpectation("RELEASE Statement"),
    function(s, a, n) {
        return {
          'type': 'statement',
          'variant': keyNode(s),
          'target': n
        };
      },
    peg$otherExpectation("ALTER TABLE Statement"),
    function(s, n, e) {
        return Object.assign({
          'type': 'statement',
          'variant': keyNode(s),
          'target': n
        }, e);
      },
    peg$otherExpectation("ALTER TABLE Keyword"),
    function(a, t) { return foldStringKey([ a, t ]); },
    peg$otherExpectation("RENAME TO Keyword"),
    function(s, n) {
        return {
          'action': keyNode(s),
          'name': n
        };
      },
    peg$otherExpectation("ADD COLUMN Keyword"),
    function(s, d) {
        return {
          'action': keyNode(s),
          'definition': d
        };
      },
    function(w, s) { return Object.assign(s, w); },
    peg$otherExpectation("WITH Clause"),
    function(s, v, t) {
        var recursive = {
          'variant': isOkay(v) ? 'recursive' : 'common'
        };
        if (isArrayOkay(t)) {
          // Add 'recursive' property into each table expression
          t = t.map(function (elem) {
            return Object.assign(elem, recursive);
          });
        }
        return {
          'with': t
        };
      },
    function(f, r) { return flattenAll([ f, r ]); },
    peg$otherExpectation("Common Table Expression"),
    function(t, s) {
        return Object.assign({
          'type': 'expression',
          'format': 'table',
          'variant': 'common',
          'target': t
        }, s);
      },
    function(s) {
        return {
          'expression': s
        };
      },
    function(w, s) {
        return Object.assign(s, w);
      },
    peg$otherExpectation("ATTACH Statement"),
    function(a, b, e, n) {
        return {
          'type': 'statement',
          'variant': keyNode(a),
          'target': n,
          'attach': e
        };
      },
    peg$otherExpectation("DETACH Statement"),
    function(d, b, n) {
        return {
          'type': 'statement',
          'variant': keyNode(d),
          'target': n
        };
      },
    peg$otherExpectation("VACUUM Statement"),
    function(v, t) {
        return Object.assign({
          'type': 'statement',
          'variant': 'vacuum'
        }, t);
      },
    function(t) {
        return {
          'target': t
        };
      },
    peg$otherExpectation("ANALYZE Statement"),
    function(s, a) {
        return Object.assign({
          'type': 'statement',
          'variant': keyNode(s)
        }, a);
      },
    function(n) {
        return {
          'target': n['name']
        };
      },
    peg$otherExpectation("REINDEX Statement"),
    function(a) {
        return {
          'target': a['name']
        };
      },
    peg$otherExpectation("PRAGMA Statement"),
    function(s, n, v) {
        return {
          'type': 'statement',
          'variant': keyNode(s),
          'target': n,
          'args': {
            'type': 'expression',
            'variant': 'list',
            'expression': v
          }
        };
      },
    function(v) { return v; },
    function(v) { return /^(yes|no|on|off|false|true|0|1)$/i.test(v) },
    function(v) {
        return {
          'type': 'literal',
          'variant': 'boolean',
          'normalized': (/^(yes|on|true|1)$/i.test(v) ? '1' : '0'),
          'value': v
        };
      },
    function(n) {
        return keyNode(n);
      },
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'name',
          'name': n
        };
      },
    peg$otherExpectation("SELECT Statement"),
    function(s, o, l) {
        return Object.assign(s, o, l);
      },
    peg$otherExpectation("ORDER BY Clause"),
    function(d) {
        return {
          'order': d['result']
        };
      },
    peg$otherExpectation("LIMIT Clause"),
    function(s, e, d) {
        return {
          'limit': Object.assign({
            'type': 'expression',
            'variant': 'limit',
            'start': e
          }, d)
        };
      },
    peg$otherExpectation("OFFSET Clause"),
    function(o, e) {
        return {
          'offset': e
        };
      },
    function(s, u) {
        if (isArrayOkay(u)) {
          return {
            'type': 'statement',
            'variant': 'compound',
            'statement': s,
            'compound': u
          };
        } else {
          return s;
        }
      },
    peg$otherExpectation("Union Operation"),
    function(c, s) {
        return {
          'type': 'compound',
          'variant': c,
          'statement': s
        };
      },
    function(s, f, w, g) {
        return Object.assign({
          'type': 'statement',
          'variant': 'select',
        }, s, f, w, g);
      },
    peg$otherExpectation("SELECT Results Clause"),
    function(d, t) {
        return Object.assign({
          'result': t
        }, d);
      },
    peg$otherExpectation("SELECT Results Modifier"),
    function(s) {
        return {
          'distinct': true
        };
      },
    function(s) {
        return {};
      },
    peg$otherExpectation("FROM Clause"),
    function(f, s) {
        return {
          'from': s
        };
      },
    peg$otherExpectation("WHERE Clause"),
    function(f, e) {
        return {
          'where': makeArray(e)
        };
      },
    peg$otherExpectation("GROUP BY Clause"),
    function(f, e, h) {
        return Object.assign({
          'group': e
        }, h);
      },
    peg$otherExpectation("HAVING Clause"),
    function(f, e) {
        return {
          'having': e
        };
      },
    function(q, s) {
        return {
          'type': 'identifier',
          'variant': 'star',
          'name': foldStringWord([ q, s ])
        };
      },
    function(n, s) { return foldStringWord([ n, s ]); },
    function(e, a) {
        return Object.assign(e, a);
      },
    function(f, t) {
        if (isArrayOkay(t)) {
          return {
            'type': 'map',
            'variant': 'join',
            'source': f,
            'map': t
          };
        }
        return f;
      },
    function(cl, c) {
        return Object.assign(cl, c);
      },
    peg$otherExpectation("CROSS JOIN Operation"),
    function(n) {
        return {
          'type': 'join',
          'variant': 'cross join',
          'source': n
        };
      },
    peg$otherExpectation("JOIN Operation"),
    function(o, n) {
        return {
          'type': 'join',
          'variant': keyNode(o),
          'source': n
        };
      },
    function(n, l, a) {
        return Object.assign({
          'type': 'function',
          'variant': 'table',
          'name': n,
          'args': l
        }, a);
      },
    peg$otherExpectation("Qualified Table"),
    function(d, i) {
        return Object.assign(d, i);
      },
    peg$otherExpectation("Qualified Table Identifier"),
    function(n, a) {
        return Object.assign(n, a);
      },
    peg$otherExpectation("Qualfied Table Index"),
    function(s, n) {
        return {
          'index': n
        };
      },
    function(n, i) {
        // TODO: Not sure what should happen here
        return {
          'index': foldStringKey([ n, i ])
        };
      },
    peg$otherExpectation("SELECT Source"),
    function(l, a) { return Object.assign(l, a); },
    peg$otherExpectation("Subquery"),
    function(s, a) {
        return Object.assign(s, a);
      },
    peg$otherExpectation("Alias"),
    function(a, n) {
        return {
          'alias': n
        };
      },
    peg$otherExpectation("JOIN Operator"),
    function(n, t, j) { return foldStringKey([ n, t, j ]); },
    function(t, o) { return foldStringKey([ t, o ]); },
    function(t) { return keyNode(t); },
    peg$otherExpectation("JOIN Constraint"),
    function(c) {
        return {
          'constraint': Object.assign({
            'type': 'constraint',
            'variant': 'join'
          }, c)
        }
      },
    peg$otherExpectation("Join ON Clause"),
    function(s, e) {
        return {
          'format': keyNode(s),
          'on': e
        };
      },
    peg$otherExpectation("Join USING Clause"),
    function(s, e) {
        return {
          'format': keyNode(s),
          'using': e
        };
      },
    peg$otherExpectation("VALUES Clause"),
    function(s, l) {
        return {
          'type': 'statement',
          'variant': 'select',
          'result': l
        };
      },
    function(f, b) {
        return {
          'result': flattenAll([ f, b ])
        };
      },
    function(i) { return i; },
    peg$otherExpectation("Ordering Expression"),
    function(e, d) {
        // Only convert this into an ordering expression if it contains
        // more than just the expression.
        if (isOkay(d)) {
          return Object.assign({
            'type': 'expression',
            'variant': 'order',
            'expression': e
          }, d);
        }
        return e;
      },
    peg$otherExpectation("Star"),
    peg$otherExpectation("Fallback Type"),
    peg$otherExpectation("INSERT Statement"),
    function(k, t) {
        return Object.assign({
          'type': 'statement',
          'variant': 'insert'
        }, k, t);
      },
    peg$otherExpectation("INSERT Keyword"),
    function(a, m) {
        return Object.assign({
          'action': keyNode(a)
        }, m);
      },
    peg$otherExpectation("REPLACE Keyword"),
    function(a) {
        return {
          'action': keyNode(a)
        };
      },
    peg$otherExpectation("INSERT OR Modifier"),
    function(s, m) {
        return {
          'or': keyNode(m)
        };
      },
    function(i, r) {
        return Object.assign({
          'into': i
        }, r);
      },
    peg$otherExpectation("INTO Clause"),
    function(s, t) {
        return t;
      },
    peg$otherExpectation("INTO Keyword"),
    function(r) {
        return {
          'result': r
        };
      },
    peg$otherExpectation("Column List"),
    function(f, b) {
        return {
          'columns': flattenAll([ f, b ])
        };
      },
    function(c) { return c; },
    peg$otherExpectation("Column Name"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'column',
          'name': n
        };
      },
    function(s, r) { return r; },
    peg$otherExpectation("VALUES Keyword"),
    function(f, b) { return flattenAll([ f, b ]); },
    peg$otherExpectation("Wrapped Expression List"),
    function(e) {
        return e;
      },
    peg$otherExpectation("DEFAULT VALUES Clause"),
    function(d, v) {
        return {
          'type': 'values',
          'variant': 'default'
          // TODO: Not sure what should go here
          // , 'values': null
        };
      },
    peg$otherExpectation("Compound Operator"),
    peg$otherExpectation("UNION Operator"),
    function(s, a) { return foldStringKey([ s, a ]); },
    function(a) { return a; },
    peg$otherExpectation("UPDATE Statement"),
    function(s, f, t, u, w, o, l) {
        return Object.assign({
          'type': 'statement',
          'variant': s,
          'into': t
        }, f, u, w, o, l);
      },
    peg$otherExpectation("UPDATE Keyword"),
    peg$otherExpectation("UPDATE OR Modifier"),
    function(t) {
        return {
          'or': keyNode(t)
        };
      },
    peg$otherExpectation("SET Clause"),
    function(c) {
        return {
          'set': c
        };
      },
    peg$otherExpectation("Column Assignment"),
    function(f, e) {
        return {
          'type': 'assignment',
          'target': f,
          'value': e
        };
      },
    peg$otherExpectation("DELETE Statement"),
    function(s, t, w, o, l) {
        return Object.assign({
          'type': 'statement',
          'variant': s,
          'from': t
        }, w, o, l);
      },
    peg$otherExpectation("DELETE Keyword"),
    peg$otherExpectation("CREATE Statement"),
    peg$otherExpectation("CREATE TABLE Statement"),
    function(s, ne, id, r) {
        return Object.assign({
          'type': 'statement',
          'name': id
        }, s, r, ne);
      },
    function(s, tmp, t) {
        return Object.assign({
          'variant': s,
          'format': keyNode(t)
        }, tmp);
      },
    function(t) {
        return {
          'temporary': isOkay(t)
        };
      },
    peg$otherExpectation("IF NOT EXISTS Modifier"),
    function(i, n, e) {
        return {
          'condition': makeArray({
            'type': 'condition',
            'variant': keyNode(i),
            'condition': {
              'type': 'expression',
              'variant': keyNode(e),
              'operator': foldStringKey([ n, e ])
            }
          })
        };
      },
    peg$otherExpectation("Table Definition"),
    function(s, t, r) {
        return Object.assign({
          'definition': flattenAll([ s, t ])
        }, r);
      },
    function(r, w) {
        return {
          'optimization': [{
            'type': 'optimization',
            'value': foldStringKey([ r, w ])
          }]
        };
      },
    function(f) { return f; },
    peg$otherExpectation("Column Definition"),
    function(n, t, c) {
        return Object.assign({
          'type': 'definition',
          'variant': 'column',
          'name': n,
          'definition': (isOkay(c) ? c : []),
        }, t);
      },
    peg$otherExpectation("Column Datatype"),
    function(t) {
        return {
          'datatype': t
        };
      },
    peg$otherExpectation("Column Constraint"),
    function(n, c, ln) {
        return Object.assign(c, n);
      },
    function(cl) {
        return cl[cl.length - 1];
      },
    peg$otherExpectation("CONSTRAINT Name"),
    function(n) {
        return {
          'name': n
        };
      },
    peg$otherExpectation("FOREIGN KEY Column Constraint"),
    function(f) {
        return Object.assign({
          'variant': 'foreign key'
        }, f);
      },
    peg$otherExpectation("PRIMARY KEY Column Constraint"),
    function(p, d, c, a) {
        return Object.assign(p, c, d, a);
      },
    peg$otherExpectation("PRIMARY KEY Keyword"),
    function(s, k) {
        return {
          'type': 'constraint',
          'variant': foldStringKey([ s, k ])
        };
      },
    peg$otherExpectation("AUTOINCREMENT Keyword"),
    function(a) {
        return {
          'autoIncrement': true
        };
      },
    function(s, c) {
        return Object.assign({
          'type': 'constraint',
          'variant': s
        }, c);
      },
    peg$otherExpectation("UNIQUE Column Constraint"),
    peg$otherExpectation("NULL Column Constraint"),
    function(n, l) { return foldStringKey([ n, l ]); },
    peg$otherExpectation("CHECK Column Constraint"),
    peg$otherExpectation("DEFAULT Column Constraint"),
    function(s, v) {
        return {
          'type': 'constraint',
          'variant': keyNode(s),
          'value': v
        };
      },
    peg$otherExpectation("COLLATE Column Constraint"),
    function(c) {
        return {
          'type': 'constraint',
          'variant': 'collate',
          'collate': c
        };
      },
    peg$otherExpectation("Table Constraint"),
    function(n, c, nl) {
        return Object.assign({
          'type': 'definition',
          'variant': 'constraint'
        }, c, n);
      },
    peg$otherExpectation("CHECK Table Constraint"),
    function(c) {
        return {
          'definition': makeArray(c)
        };
      },
    peg$otherExpectation("PRIMARY KEY Table Constraint"),
    function(k, c, t) {
        return {
          'definition': makeArray(Object.assign(k, t, c[1])),
          'columns': c[0]
        };
      },
    function(s) {
        return {
          'type': 'constraint',
          'variant': keyNode(s)
        };
      },
    function(p, k) { return foldStringKey([ p, k ]); },
    peg$otherExpectation("UNIQUE Keyword"),
    function(u) { return keyNode(u); },
    function(f, b) {
        return [f].concat(b);
      },
    function(c) {
        return c.map(([ res ]) => res);
      },
    function(c) {
        const auto = c.find(([ res, a ]) => isOkay(a));
        return [
          c.map(([ res, a ]) => res),
          auto ? auto[1] : null
        ];
      },
    peg$otherExpectation("Indexed Column"),
    function(e, d, a) {
        // Only convert this into an ordering expression if it contains
        // more than just the expression.
        let res = e;
        if (isOkay(d)) {
          res = Object.assign({
            'type': 'expression',
            'variant': 'order',
            'expression': e
          }, d);
        }
        return [ res, a ];
      },
    peg$otherExpectation("Collation"),
    function(c) {
        return {
          'collate': makeArray(c)
        };
      },
    peg$otherExpectation("Column Direction"),
    function(t) {
        return {
          'direction': keyNode(t),
        };
      },
    function(s, t) {
        return {
          'conflict': keyNode(t)
        };
      },
    peg$otherExpectation("ON CONFLICT Keyword"),
    function(o, c) { return foldStringKey([ o, c ]); },
    function(k, c) {
        return {
          'type': 'constraint',
          'variant': keyNode(k),
          'expression': c
        };
      },
    peg$otherExpectation("FOREIGN KEY Table Constraint"),
    function(k, l, c) {
        return Object.assign({
          'definition': makeArray(Object.assign(k, c))
        }, l);
      },
    peg$otherExpectation("FOREIGN KEY Keyword"),
    function(f, k) {
        return {
          'type': 'constraint',
          'variant': foldStringKey([ f, k ])
        };
      },
    function(r, a, d) {
        return Object.assign({
          'type': 'constraint'
        }, r, a, d);
      },
    peg$otherExpectation("REFERENCES Clause"),
    function(s, t) {
        return {
          'references': t
        };
      },
    function(f, b) {
        return {
          'action': flattenAll([ f, b ])
        };
      },
    peg$otherExpectation("FOREIGN KEY Action Clause"),
    function(m, a, n) {
        return {
          'type': 'action',
          'variant': keyNode(m),
          'action': keyNode(n)
        };
      },
    peg$otherExpectation("FOREIGN KEY Action"),
    function(s, v) { return foldStringKey([ s, v ]); },
    function(c) { return keyNode(c); },
    function(n, a) { return foldStringKey([ n, a ]); },
    function(m, n) {
        return {
          'type': 'action',
          'variant': keyNode(m),
          'action': n
        };
      },
    peg$otherExpectation("DEFERRABLE Clause"),
    function(n, d, i) {
        return {
          'defer': foldStringKey([ n, d, i ])
        };
      },
    function(i, d) { return foldStringKey([ i, d ]); },
    function(s) {
        return {
          'definition': makeArray(s)
        };
      },
    peg$otherExpectation("CREATE INDEX Statement"),
    function(s, ne, n, o, w) {
        return Object.assign({
          'type': 'statement',
          'target': n,
          'on': o,
        }, s, ne, w);
      },
    function(s, u, i) {
        return Object.assign({
          'variant': keyNode(s),
          'format': keyNode(i)
        }, u);
      },
    function(u) {
        return {
          'unique': true
        };
      },
    peg$otherExpectation("ON Clause"),
    function(o, t, c) {
        return {
          'type': 'identifier',
          'variant': 'expression',
          'format': 'table',
          'name': t['name'],
          'columns': c
        };
      },
    peg$otherExpectation("CREATE TRIGGER Statement"),
    function(s, ne, n, cd, o, me, wh, a) {
        return Object.assign({
          'type': 'statement',
          'target': n,
          'on': o,
          'event': cd,
          'by': (isOkay(me) ? me : 'row'),
          'action': makeArray(a)
        }, s, ne, wh);
      },
    function(s, tmp, t) {
        return Object.assign({
          'variant': keyNode(s),
          'format': keyNode(t)
        }, tmp);
      },
    peg$otherExpectation("Conditional Clause"),
    function(m, d) {
        return Object.assign({
          'type': 'event'
        }, m, d);
      },
    function(m) {
        return {
          'occurs': keyNode(m)
        };
      },
    function(i, o) { return foldStringKey([ i, o ]); },
    peg$otherExpectation("Conditional Action"),
    function(o) {
        return {
          'event': keyNode(o)
        };
      },
    function(s, f) {
        return {
          'event': keyNode(s),
          'of': f
        };
      },
    function(s, c) { return c; },
    "statement",
    peg$literalExpectation("STATEMENT", true),
    function(f, e, r) { return keyNode(r); },
    function(w, e) {
        return {
          'when': e
        };
      },
    peg$otherExpectation("Actions Clause"),
    function(s, a, e) { return a; },
    function(l) { return l; },
    peg$otherExpectation("CREATE VIEW Statement"),
    function(s, ne, n, r) {
        return Object.assign({
          'type': 'statement',
          'target': n,
          'result': r
        }, s, ne);
      },
    function(n, a) {
        return Object.assign({
          'type': 'identifier',
          'variant': 'expression',
          'format': 'view',
          'name': n['name'],
          'columns': []
        }, a);
      },
    function(s, tmp, v) {
        return Object.assign({
          'variant': keyNode(s),
          'format': keyNode(v)
        }, tmp);
      },
    peg$otherExpectation("CREATE VIRTUAL TABLE Statement"),
    function(s, ne, n, m) {
        return Object.assign({
          'type': 'statement',
          'target': n,
          'result': m
        }, s, ne);
      },
    function(s, v, t) {
        return {
          'variant': keyNode(s),
          'format': keyNode(v)
        };
      },
    function(m, a) {
        return Object.assign({
          'type': 'module',
          'variant': 'virtual',
          'name': m
        }, a);
      },
    peg$otherExpectation("Module Arguments"),
    function(l) {
        return {
          'args': {
            'type': 'expression',
            'variant': 'list',
            'expression': isOkay(l) ? l : []
          }
        };
      },
    function(f, b) {
        return flattenAll([ f, b ]).filter((arg) => isOkay(arg));
      },
    function(a) {
        return a;
      },
    peg$otherExpectation("DROP Statement"),
    function(s, q) {
        /**
         * @note Manually copy in the correct variant for the target
         */
        return Object.assign({
          'type': 'statement',
          'target': Object.assign(q, {
                      'variant': s['format']
                    })
        }, s);
      },
    peg$otherExpectation("DROP Keyword"),
    function(s, t, i) {
         return Object.assign({
           'variant': keyNode(s),
           'format': t,
           'condition': []
         }, i);
      },
    peg$otherExpectation("DROP Type"),
    peg$otherExpectation("IF EXISTS Keyword"),
    function(i, e) {
        return {
          'condition': [{
            'type': 'condition',
            'variant': keyNode(i),
            'condition': {
              'type': 'expression',
              'variant': keyNode(e),
              'operator': keyNode(e)
            }
          }]
        };
      },
    peg$otherExpectation("Or"),
    peg$otherExpectation("Add"),
    peg$otherExpectation("Subtract"),
    peg$otherExpectation("Multiply"),
    peg$otherExpectation("Divide"),
    peg$otherExpectation("Modulo"),
    peg$otherExpectation("Shift Left"),
    peg$otherExpectation("Shift Right"),
    peg$otherExpectation("Logical AND"),
    peg$otherExpectation("Logical OR"),
    peg$otherExpectation("Less Than"),
    peg$otherExpectation("Greater Than"),
    peg$otherExpectation("Less Than Or Equal"),
    peg$otherExpectation("Greater Than Or Equal"),
    peg$otherExpectation("Equal"),
    peg$otherExpectation("Not Equal"),
    peg$otherExpectation("IS"),
    function(i, n) { return foldStringKey([ i, n ]); },
    peg$otherExpectation("Identifier"),
    peg$otherExpectation("Database Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'database',
          'name': n
        };
      },
    peg$otherExpectation("Function Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          // TODO: Should this be `table function` since it is table-function name
          'variant': 'function',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("Table Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'table',
          'name': foldStringWord([ d, n ])
        };
      },
    function(n, d) { return foldStringWord([ n, d ]); },
    peg$otherExpectation("Column Identifier"),
    function(q, n) {
        return {
          'type': 'identifier',
          'variant': 'column',
          'name': foldStringWord([ q, n ])
        };
      },
    function() { return ''; },
    function(d, t) { return foldStringWord([ d, t ]); },
    peg$otherExpectation("Collation Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'collation',
          'name': n
        };
      },
    peg$otherExpectation("Savepoint Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'savepoint',
          'name': n
        };
      },
    peg$otherExpectation("Index Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'index',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("Trigger Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'trigger',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("View Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'view',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("Pragma Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'pragma',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("CTE Identifier"),
    function(d) {
        return d;
      },
    function(n, a) {
        return Object.assign({
          'type': 'identifier',
          'variant': 'expression',
          'format': 'table',
          'name': n['name'],
          'columns': []
        }, a);
      },
    peg$otherExpectation("Table Constraint Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'constraint',
          'format': 'table',
          'name': n
        };
      },
    peg$otherExpectation("Column Constraint Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'constraint',
          'format': 'column',
          'name': n
        };
      },
    peg$otherExpectation("Datatype Name"),
    function(t) { return [t, 'text']; },
    function(t) { return [t, 'real']; },
    function(t) { return [t, 'numeric']; },
    function(t) { return [t, 'integer']; },
    function(t) { return [t, 'none']; },
    peg$otherExpectation("TEXT Datatype Name"),
    "n",
    peg$literalExpectation("N", true),
    "var",
    peg$literalExpectation("VAR", true),
    "char",
    peg$literalExpectation("CHAR", true),
    "tiny",
    peg$literalExpectation("TINY", true),
    "medium",
    peg$literalExpectation("MEDIUM", true),
    "long",
    peg$literalExpectation("LONG", true),
    "text",
    peg$literalExpectation("TEXT", true),
    "clob",
    peg$literalExpectation("CLOB", true),
    peg$otherExpectation("REAL Datatype Name"),
    "float",
    peg$literalExpectation("FLOAT", true),
    "real",
    peg$literalExpectation("REAL", true),
    peg$otherExpectation("DOUBLE Datatype Name"),
    "double",
    peg$literalExpectation("DOUBLE", true),
    "precision",
    peg$literalExpectation("PRECISION", true),
    function(d, p) { return foldStringWord([ d, p ]); },
    peg$otherExpectation("NUMERIC Datatype Name"),
    "numeric",
    peg$literalExpectation("NUMERIC", true),
    "decimal",
    peg$literalExpectation("DECIMAL", true),
    "boolean",
    peg$literalExpectation("BOOLEAN", true),
    "date",
    peg$literalExpectation("DATE", true),
    "time",
    peg$literalExpectation("TIME", true),
    "stamp",
    peg$literalExpectation("STAMP", true),
    "string",
    peg$literalExpectation("STRING", true),
    peg$otherExpectation("INTEGER Datatype Name"),
    "int",
    peg$literalExpectation("INT", true),
    "2",
    peg$literalExpectation("2", false),
    "4",
    peg$literalExpectation("4", false),
    "8",
    peg$literalExpectation("8", false),
    "eger",
    peg$literalExpectation("EGER", true),
    "big",
    peg$literalExpectation("BIG", true),
    "small",
    peg$literalExpectation("SMALL", true),
    "floating",
    peg$literalExpectation("FLOATING", true),
    "point",
    peg$literalExpectation("POINT", true),
    function(f, p) {
        return foldStringWord([ f, p ]);
      },
    peg$otherExpectation("BLOB Datatype Name"),
    "blob",
    peg$literalExpectation("BLOB", true),
    /^[a-z0-9$_]/i,
    peg$classExpectation([["a", "z"], ["0", "9"], "$", "_"], false, true),
    "\\u",
    peg$literalExpectation("\\u", false),
    /^[a-f0-9]/i,
    peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
    function(u, s) {
      return foldStringWord([ u, s ]).toLowerCase();
    },
    function(n) {
       return keyNode(n);
      },
    peg$anyExpectation(),
    function(n) {
        return textNode(n);
      },
    /^[ \t]/,
    peg$classExpectation([" ", "\t"], false, false),
    "\"",
    peg$literalExpectation("\"", false),
    "\"\"",
    peg$literalExpectation("\"\"", false),
    /^[^"]/,
    peg$classExpectation(["\""], true, false),
    function(n) { return unescape(n, '"'); },
    "'",
    peg$literalExpectation("'", false),
    function(n) { return unescape(n, "'"); },
    "`",
    peg$literalExpectation("`", false),
    "``",
    peg$literalExpectation("``", false),
    /^[^`]/,
    peg$classExpectation(["`"], true, false),
    function(n) { return unescape(n, '`'); },
    peg$otherExpectation("Open Bracket"),
    "[",
    peg$literalExpectation("[", false),
    peg$otherExpectation("Close Bracket"),
    "]",
    peg$literalExpectation("]", false),
    peg$otherExpectation("Open Parenthesis"),
    "(",
    peg$literalExpectation("(", false),
    peg$otherExpectation("Close Parenthesis"),
    ")",
    peg$literalExpectation(")", false),
    peg$otherExpectation("Comma"),
    ",",
    peg$literalExpectation(",", false),
    peg$otherExpectation("Period"),
    ".",
    peg$literalExpectation(".", false),
    peg$otherExpectation("Asterisk"),
    "*",
    peg$literalExpectation("*", false),
    peg$otherExpectation("Question Mark"),
    "?",
    peg$literalExpectation("?", false),
    peg$otherExpectation("Single Quote"),
    peg$otherExpectation("Double Quote"),
    peg$otherExpectation("Backtick"),
    peg$otherExpectation("Tilde"),
    "~",
    peg$literalExpectation("~", false),
    peg$otherExpectation("Plus"),
    "+",
    peg$literalExpectation("+", false),
    peg$otherExpectation("Minus"),
    "-",
    peg$literalExpectation("-", false),
    "=",
    peg$literalExpectation("=", false),
    peg$otherExpectation("Ampersand"),
    "&",
    peg$literalExpectation("&", false),
    peg$otherExpectation("Pipe"),
    "|",
    peg$literalExpectation("|", false),
    "%",
    peg$literalExpectation("%", false),
    "<",
    peg$literalExpectation("<", false),
    ">",
    peg$literalExpectation(">", false),
    peg$otherExpectation("Exclamation"),
    "!",
    peg$literalExpectation("!", false),
    peg$otherExpectation("Semicolon"),
    ";",
    peg$literalExpectation(";", false),
    peg$otherExpectation("Colon"),
    peg$otherExpectation("Forward Slash"),
    "/",
    peg$literalExpectation("/", false),
    peg$otherExpectation("Backslash"),
    "\\",
    peg$literalExpectation("\\", false),
    "abort",
    peg$literalExpectation("ABORT", true),
    "action",
    peg$literalExpectation("ACTION", true),
    "add",
    peg$literalExpectation("ADD", true),
    "after",
    peg$literalExpectation("AFTER", true),
    "all",
    peg$literalExpectation("ALL", true),
    "alter",
    peg$literalExpectation("ALTER", true),
    "analyze",
    peg$literalExpectation("ANALYZE", true),
    "and",
    peg$literalExpectation("AND", true),
    "as",
    peg$literalExpectation("AS", true),
    "asc",
    peg$literalExpectation("ASC", true),
    "attach",
    peg$literalExpectation("ATTACH", true),
    "autoincrement",
    peg$literalExpectation("AUTOINCREMENT", true),
    "before",
    peg$literalExpectation("BEFORE", true),
    "begin",
    peg$literalExpectation("BEGIN", true),
    "between",
    peg$literalExpectation("BETWEEN", true),
    "by",
    peg$literalExpectation("BY", true),
    "cascade",
    peg$literalExpectation("CASCADE", true),
    "case",
    peg$literalExpectation("CASE", true),
    "cast",
    peg$literalExpectation("CAST", true),
    "check",
    peg$literalExpectation("CHECK", true),
    "collate",
    peg$literalExpectation("COLLATE", true),
    "column",
    peg$literalExpectation("COLUMN", true),
    "commit",
    peg$literalExpectation("COMMIT", true),
    "conflict",
    peg$literalExpectation("CONFLICT", true),
    "constraint",
    peg$literalExpectation("CONSTRAINT", true),
    "create",
    peg$literalExpectation("CREATE", true),
    "cross",
    peg$literalExpectation("CROSS", true),
    "current_date",
    peg$literalExpectation("CURRENT_DATE", true),
    "current_time",
    peg$literalExpectation("CURRENT_TIME", true),
    "current_timestamp",
    peg$literalExpectation("CURRENT_TIMESTAMP", true),
    "database",
    peg$literalExpectation("DATABASE", true),
    "default",
    peg$literalExpectation("DEFAULT", true),
    "deferrable",
    peg$literalExpectation("DEFERRABLE", true),
    "deferred",
    peg$literalExpectation("DEFERRED", true),
    "delete",
    peg$literalExpectation("DELETE", true),
    "desc",
    peg$literalExpectation("DESC", true),
    "detach",
    peg$literalExpectation("DETACH", true),
    "distinct",
    peg$literalExpectation("DISTINCT", true),
    "drop",
    peg$literalExpectation("DROP", true),
    "each",
    peg$literalExpectation("EACH", true),
    "else",
    peg$literalExpectation("ELSE", true),
    "end",
    peg$literalExpectation("END", true),
    "escape",
    peg$literalExpectation("ESCAPE", true),
    "except",
    peg$literalExpectation("EXCEPT", true),
    "exclusive",
    peg$literalExpectation("EXCLUSIVE", true),
    "exists",
    peg$literalExpectation("EXISTS", true),
    "explain",
    peg$literalExpectation("EXPLAIN", true),
    "fail",
    peg$literalExpectation("FAIL", true),
    "for",
    peg$literalExpectation("FOR", true),
    "foreign",
    peg$literalExpectation("FOREIGN", true),
    "from",
    peg$literalExpectation("FROM", true),
    "full",
    peg$literalExpectation("FULL", true),
    "glob",
    peg$literalExpectation("GLOB", true),
    "group",
    peg$literalExpectation("GROUP", true),
    "having",
    peg$literalExpectation("HAVING", true),
    "if",
    peg$literalExpectation("IF", true),
    "ignore",
    peg$literalExpectation("IGNORE", true),
    "immediate",
    peg$literalExpectation("IMMEDIATE", true),
    "in",
    peg$literalExpectation("IN", true),
    "index",
    peg$literalExpectation("INDEX", true),
    "indexed",
    peg$literalExpectation("INDEXED", true),
    "initially",
    peg$literalExpectation("INITIALLY", true),
    "inner",
    peg$literalExpectation("INNER", true),
    "insert",
    peg$literalExpectation("INSERT", true),
    "instead",
    peg$literalExpectation("INSTEAD", true),
    "intersect",
    peg$literalExpectation("INTERSECT", true),
    "into",
    peg$literalExpectation("INTO", true),
    "is",
    peg$literalExpectation("IS", true),
    "isnull",
    peg$literalExpectation("ISNULL", true),
    "join",
    peg$literalExpectation("JOIN", true),
    "key",
    peg$literalExpectation("KEY", true),
    "left",
    peg$literalExpectation("LEFT", true),
    "like",
    peg$literalExpectation("LIKE", true),
    "limit",
    peg$literalExpectation("LIMIT", true),
    "match",
    peg$literalExpectation("MATCH", true),
    "natural",
    peg$literalExpectation("NATURAL", true),
    "no",
    peg$literalExpectation("NO", true),
    "not",
    peg$literalExpectation("NOT", true),
    "notnull",
    peg$literalExpectation("NOTNULL", true),
    "of",
    peg$literalExpectation("OF", true),
    "offset",
    peg$literalExpectation("OFFSET", true),
    "on",
    peg$literalExpectation("ON", true),
    "or",
    peg$literalExpectation("OR", true),
    "order",
    peg$literalExpectation("ORDER", true),
    "outer",
    peg$literalExpectation("OUTER", true),
    "over",
    peg$literalExpectation("OVER", true),
    "partition",
    peg$literalExpectation("PARTITION", true),
    "plan",
    peg$literalExpectation("PLAN", true),
    "pragma",
    peg$literalExpectation("PRAGMA", true),
    "primary",
    peg$literalExpectation("PRIMARY", true),
    "query",
    peg$literalExpectation("QUERY", true),
    "raise",
    peg$literalExpectation("RAISE", true),
    "recursive",
    peg$literalExpectation("RECURSIVE", true),
    "references",
    peg$literalExpectation("REFERENCES", true),
    "regexp",
    peg$literalExpectation("REGEXP", true),
    "reindex",
    peg$literalExpectation("REINDEX", true),
    "release",
    peg$literalExpectation("RELEASE", true),
    "rename",
    peg$literalExpectation("RENAME", true),
    "replace",
    peg$literalExpectation("REPLACE", true),
    "restrict",
    peg$literalExpectation("RESTRICT", true),
    "right",
    peg$literalExpectation("RIGHT", true),
    "rollback",
    peg$literalExpectation("ROLLBACK", true),
    "row",
    peg$literalExpectation("ROW", true),
    "rowid",
    peg$literalExpectation("ROWID", true),
    "savepoint",
    peg$literalExpectation("SAVEPOINT", true),
    "select",
    peg$literalExpectation("SELECT", true),
    "set",
    peg$literalExpectation("SET", true),
    "table",
    peg$literalExpectation("TABLE", true),
    "temp",
    peg$literalExpectation("TEMP", true),
    "temporary",
    peg$literalExpectation("TEMPORARY", true),
    "then",
    peg$literalExpectation("THEN", true),
    "to",
    peg$literalExpectation("TO", true),
    "transaction",
    peg$literalExpectation("TRANSACTION", true),
    "trigger",
    peg$literalExpectation("TRIGGER", true),
    "union",
    peg$literalExpectation("UNION", true),
    "unique",
    peg$literalExpectation("UNIQUE", true),
    "update",
    peg$literalExpectation("UPDATE", true),
    "using",
    peg$literalExpectation("USING", true),
    "vacuum",
    peg$literalExpectation("VACUUM", true),
    "values",
    peg$literalExpectation("VALUES", true),
    "view",
    peg$literalExpectation("VIEW", true),
    "virtual",
    peg$literalExpectation("VIRTUAL", true),
    "when",
    peg$literalExpectation("WHEN", true),
    "where",
    peg$literalExpectation("WHERE", true),
    "with",
    peg$literalExpectation("WITH", true),
    "without",
    peg$literalExpectation("WITHOUT", true),
    function(r) { return keyNode(r); },
    function() { return null; },
    peg$otherExpectation("Line Comment"),
    "--",
    peg$literalExpectation("--", false),
    /^[\n\v\f\r]/,
    peg$classExpectation(["\n", "\v", "\f", "\r"], false, false),
    peg$otherExpectation("Block Comment"),
    "/*",
    peg$literalExpectation("/*", false),
    "*/",
    peg$literalExpectation("*/", false),
    /^[\n\v\f\r\t ]/,
    peg$classExpectation(["\n", "\v", "\f", "\r", "\t", " "], false, false),
    peg$otherExpectation("Whitespace"),
    "__TODO__",
    peg$literalExpectation("__TODO__", false)
  ];

  var peg$bytecode = [
    peg$decode("%;\u0246/H#;#/?$;\".\" &\"/1$;#/($8$: $!!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0246/C#;#/:$;}/1$;#/($8$: $!!)($'#(#'#(\"'#&'#"),
    peg$decode("%;}/B#;\u0246/9$$;%0#*;%&/)$8#:!#\"\" )(#'#(\"'#&'#"),
    peg$decode("$;\u01B80#*;\u01B8&"),
    peg$decode("$;\u01B8/&#0#*;\u01B8&&&#"),
    peg$decode("%;$/:#;}/1$;\u0246/($8#:\"#!!)(#'#(\"'#&'#"),
    peg$decode("<%;'.# &;(/@#;\u0246/7$;*.\" &\"/)$8#:$#\"\" )(#'#(\"'#&'#=.\" 7#"),
    peg$decode("%;\u0190/' 8!:%!! )"),
    peg$decode("<%;\u019A/9#$;)0#*;)&/)$8\":'\"\"! )(\"'#&'#=.\" 7&"),
    peg$decode("%4(\"\"5!7)/1#;\u019C/($8\":*\"! )(\"'#&'#"),
    peg$decode("<%;\u01A5/R#;5/I$;\u0246/@$;+.\" &\"/2$;\u01A6/)$8%:,%\"#!)(%'#($'#(#'#(\"'#&'#=.\" 7+"),
    peg$decode("%;\u01A7/C#;\u0246/:$;5/1$;\u0246/($8$:-$!!)($'#(#'#(\"'#&'#"),
    peg$decode(";5.; &;6.5 &;2./ &;-.) &;..# &;/"),
    peg$decode("<%;\u020B/1#;\u0246/($8\":/\"!!)(\"'#&'#=.\" 7."),
    peg$decode("<%;\u01D7.) &;\u01D9.# &;\u01D8/1#;\u0246/($8\":1\"!!)(\"'#&'#=.\" 70"),
    peg$decode("<%;4.\" &\"/2#;0/)$8\":3\"\"! )(\"'#&'#=.\" 72"),
    peg$decode("<%;\u01AB/A#$;10#*;1&/1$;\u01AB/($8#:5#!!)(#'#(\"'#&'#=.\" 74"),
    peg$decode("26\"\"6677.) &48\"\"5!79"),
    peg$decode("<%4;\"\"5!7</1#;0/($8\":=\"! )(\"'#&'#=.\" 7:"),
    peg$decode("%;\u019C.# &;\u01A0/' 8!:>!! )"),
    peg$decode("<%;\u01AF.# &;\u01B0/' 8!:\"!! )=.\" 7?"),
    peg$decode("%;4.\" &\"/2#;6/)$8\":@\"\"! )(\"'#&'#"),
    peg$decode(";<.# &;7"),
    peg$decode("%;8/7#;;.\" &\"/)$8\":A\"\"! )(\"'#&'#"),
    peg$decode("<;9.# &;:=.\" 7B"),
    peg$decode("%$;>/&#0#*;>&&&#/7#;:.\" &\"/)$8\":C\"\"! )(\"'#&'#"),
    peg$decode("%;\u01A8/9#$;>0#*;>&/)$8\":D\"\"! )(\"'#&'#"),
    peg$decode("<%3F\"\"5!7G/T#4H\"\"5!7I.\" &\"/@$$;>/&#0#*;>&&&#/*$8#:J##\"! )(#'#(\"'#&'#=.\" 7E"),
    peg$decode("<%3L\"\"5\"7M/?#$;=/&#0#*;=&&&#/)$8\":N\"\"! )(\"'#&'#=.\" 7K"),
    peg$decode("4O\"\"5!7P"),
    peg$decode("4Q\"\"5!7R"),
    peg$decode("<%;@.) &;B.# &;C/' 8!:T!! )=.\" 7S"),
    peg$decode("<%;\u01AA/@#;A.\" &\"/2$;\u0246/)$8#:V#\"\"!)(#'#(\"'#&'#=.\" 7U"),
    peg$decode("%4W\"\"5!7X/9#$;>0#*;>&/)$8\":Y\"\"! )(\"'#&'#"),
    peg$decode("<%4[\"\"5!7\\/H#$;\u0198/&#0#*;\u0198&&&#/2$;\u0246/)$8#:]#\"\"!)(#'#(\"'#&'#=.\" 7Z"),
    peg$decode("<%2_\"\"6_7`/o#$;\u0198.) &2a\"\"6a7b/2#0/*;\u0198.) &2a\"\"6a7b&&&#/A$;\u0246/8$;D.\" &\"/*$8$:c$##\" )($'#(#'#(\"'#&'#=.\" 7^"),
    peg$decode("%;\u01A0/1#;\u0246/($8\":d\"!!)(\"'#&'#"),
    peg$decode("<%;\u0212/@#;\u0246/7$;H.# &;F/($8#:f#! )(#'#(\"'#&'#=.\" 7e"),
    peg$decode("%;\u01A5/\x81#;\u0246/x$;G.\" &\"/j$;\u0246/a$;I.\" &\"/S$;\u0246/J$;\xAE.\" &\"/<$;\u0246/3$;\u01A6/*$8):g)#&$\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
    peg$decode("%;H/' 8!:h!! )"),
    peg$decode("%;\u019A/' 8!:i!! )"),
    peg$decode("<%;\u0213/L#;\u0246/C$;\u01CB/:$;\u0246/1$;u/($8%:k%! )(%'#($'#(#'#(\"'#&'#=.\" 7j"),
    peg$decode("<%;K.\" &\"/;#;\u0246/2$;\x99/)$8#:m#\"\" )(#'#(\"'#&'#=.\" 7l"),
    peg$decode("<%;p.\" &\"/;#;\u01E9/2$;\u0246/)$8#:o#\"\"!)(#'#(\"'#&'#=.\" 7n"),
    peg$decode("<%;\u0218/_#;\u0246/V$;\u01A5/M$;\u0246/D$;M/;$;\u0246/2$;\u01A6/)$8':q'\"&\")(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7p"),
    peg$decode("<%;N.# &;O/' 8!:s!! )=.\" 7r"),
    peg$decode("<%;\u01F4/' 8!:u!! )=.\" 7t"),
    peg$decode("%;\u0222.) &;\u01BC.# &;\u01EB/M#;\u0246/D$;\u01A7/;$;\u0246/2$;|/)$8%:v%\"$ )(%'#($'#(#'#(\"'#&'#"),
    peg$decode(";?./ &;y.) &;,.# &;\u0182"),
    peg$decode("%;\u01A5/L#;\u0246/C$;u/:$;\u0246/1$;\u01A6/($8%:w%!\")(%'#($'#(#'#(\"'#&'#"),
    peg$decode(";Q.; &;J.5 &;d./ &;f.) &;L.# &;P"),
    peg$decode("%;R/;#;\u0246/2$;V/)$8#:x#\"\" )(#'#(\"'#&'#.# &;R"),
    peg$decode("%;U/A#;\u0246/8$;S.# &;u/)$8#:y#\"\" )(#'#(\"'#&'#.# &;S"),
    peg$decode(";\u01AE.U &;\u01B0.O &;\u01AF.I &%%;p/8#%<;\u01E9=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
    peg$decode("<%;\u0132/' 8!:{!! )=.\" 7z"),
    peg$decode("%;T/\x83#$%;\u0246/>#;\u016B/5$;\u0246/,$;T/#$+$)($'#(#'#(\"'#&'#0H*%;\u0246/>#;\u016B/5$;\u0246/,$;T/#$+$)($'#(#'#(\"'#&'#&/)$8\":|\"\"! )(\"'#&'#"),
    peg$decode("%;W/\x83#$%;\u0246/>#;Y/5$;\u0246/,$;W/#$+$)($'#(#'#(\"'#&'#0H*%;\u0246/>#;Y/5$;\u0246/,$;W/#$+$)($'#(#'#(\"'#&'#&/)$8\":|\"\"! )(\"'#&'#"),
    peg$decode(";\u016E.) &;\u016F.# &;\u0170"),
    peg$decode("%;X/\x83#$%;\u0246/>#;[/5$;\u0246/,$;X/#$+$)($'#(#'#(\"'#&'#0H*%;\u0246/>#;[/5$;\u0246/,$;X/#$+$)($'#(#'#(\"'#&'#&/)$8\":|\"\"! )(\"'#&'#"),
    peg$decode(";\u016C.# &;\u016D"),
    peg$decode("%;Z/\x83#$%;\u0246/>#;]/5$;\u0246/,$;Z/#$+$)($'#(#'#(\"'#&'#0H*%;\u0246/>#;]/5$;\u0246/,$;Z/#$+$)($'#(#'#(\"'#&'#&/)$8\":|\"\"! )(\"'#&'#"),
    peg$decode(";\u0171.U &;\u0172.O &;\u0173.I &%%;\u0174/8#%<;\u0174=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
    peg$decode("%;\\/\x83#$%;\u0246/>#;_/5$;\u0246/,$;\\/#$+$)($'#(#'#(\"'#&'#0H*%;\u0246/>#;_/5$;\u0246/,$;\\/#$+$)($'#(#'#(\"'#&'#&/)$8\":|\"\"! )(\"'#&'#"),
    peg$decode(";\u0177.{ &;\u0178.u &%%;\u0175/8#%<;]=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).I &%%;\u0176/8#%<;]=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
    peg$decode("%;^/9#$;a0#*;a&/)$8\":|\"\"! )(\"'#&'#"),
    peg$decode("%;\u0246/1#;b/($8\":}\"! )(\"'#&'#.H &%;\u0246/>#;c/5$;\u0246/,$;^/#$+$)($'#(#'#(\"'#&'#"),
    peg$decode("%3~\"\"5$7\x7F/?#;\u0246/6$3\x80\"\"5$7\x81/'$8#:\x82# )(#'#(\"'#&'#.? &%;\u0200/& 8!:\x83! ).. &%;\u020A/& 8!:\x82! )"),
    peg$decode(";\u017C./ &;\u017A.) &;\u017B.# &;\u0179"),
    peg$decode("<%;\u01CE/i#;\u0246/`$;\u01A5/W$;u/N$;\u0246/E$;e/<$;\u0246/3$;\u01A6/*$8(:\x85(#'$\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x84"),
    peg$decode("<%;\u01C4/:#;\u0246/1$;&/($8#:\x87#! )(#'#(\"'#&'#=.\" 7\x86"),
    peg$decode("<%;\u01CD/\x93#;\u0246/\x8A$;g.\" &\"/|$;\u0246/s$$;h/&#0#*;h&&&#/]$;\u0246/T$;i.\" &\"/F$;\u0246/=$;\u01E5/4$;\u0246/+$8*:\x89*$)'%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x88"),
    peg$decode("%%<;\u0237=.##&&!&'#/1#;u/($8\":\x8A\"! )(\"'#&'#"),
    peg$decode("<%;\u0237/i#;\u0246/`$;u/W$;\u0246/N$;\u022B/E$;\u0246/<$;u/3$;\u0246/*$8(:\x8C(#'%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x8B"),
    peg$decode("<%;\u01E4/D#;\u0246/;$;u/2$;\u0246/)$8$:\x8E$\"#!)($'#(#'#(\"'#&'#=.\" 7\x8D"),
    peg$decode("%;`/;#;\u0246/2$;k/)$8#:\x8F#\"\" )(#'#(\"'#&'#.# &;`"),
    peg$decode(";q.) &;n.# &;l"),
    peg$decode("<%;p.\" &\"/o#;\u0204./ &;\u01F0.) &;\u021B.# &;\u0206/T$;\u0246/K$;u/B$;\u0246/9$;m.\" &\"/+$8&:\x91&$%$\" )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x90"),
    peg$decode("<%;\u01E6/D#;\u0246/;$;u/2$;\u0246/)$8$:\x93$\"#!)($'#(#'#(\"'#&'#=.\" 7\x92"),
    peg$decode("<%;p.\" &\"/E#;\u01CA/<$;\u0246/3$;o/*$8$:\x95$##\" )($'#(#'#(\"'#&'#=.\" 7\x94"),
    peg$decode("%;j/W#%;\u0246/>#;\u01C3/5$;\u0246/,$;j/#$+$)($'#(#'#(\"'#&'#/)$8\":\x96\"\"! )(\"'#&'#"),
    peg$decode("%;\u0209/1#;\u0246/($8\":\x97\"!!)(\"'#&'#"),
    peg$decode("<%;p.\" &\"/E#;\u01F6/<$;\u0246/3$;r/*$8$:\x99$##\" )($'#(#'#(\"'#&'#=.\" 7\x98"),
    peg$decode(";s.# &;\u0180"),
    peg$decode("%;\u01A5/I#;\x9A.# &;v/:$;\u0246/1$;\u01A6/($8$:\x9A$!\")($'#(#'#(\"'#&'#"),
    peg$decode("%;j/\x83#$%;\u0246/>#;\u01C3/5$;\u0246/,$;j/#$+$)($'#(#'#(\"'#&'#0H*%;\u0246/>#;\u01C3/5$;\u0246/,$;j/#$+$)($'#(#'#(\"'#&'#&/)$8\":|\"\"! )(\"'#&'#"),
    peg$decode("%;t/\x83#$%;\u0246/>#;\u020F/5$;\u0246/,$;t/#$+$)($'#(#'#(\"'#&'#0H*%;\u0246/>#;\u020F/5$;\u0246/,$;t/#$+$)($'#(#'#(\"'#&'#&/)$8\":|\"\"! )(\"'#&'#"),
    peg$decode("<%;w.\" &\"/1#;\u0246/($8\":\x9C\"!!)(\"'#&'#=.\" 7\x9B"),
    peg$decode("%;u/B#;\u0246/9$$;x0#*;x&/)$8#:\x9D#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01A7/:#;u/1$;\u0246/($8#:\x9A#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u017F/s#;\u0246/j$;\u01A5/a$;z.\" &\"/S$;\u0246/J$;\u01A6/A$;\u0246/8$;E.\" &\"/*$8(:\x9F(#'$ )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x9E"),
    peg$decode("<%;\xE0/' 8!:\xA1!! ).V &%;{.\" &\"/G#;v/>$9:\xA2 \"! -\"\"&!&#/)$8#:\xA3#\"\"!)(#'#(\"'#&'#=.\" 7\xA0"),
    peg$decode("%;\u01E1.# &;\u01C0/1#;\u0246/($8\":\xA4\"!!)(\"'#&'#"),
    peg$decode("<%;//' 8!:\xA6!! )=.\" 7\xA5"),
    peg$decode("<%;~.\" &\"/;#;\x80/2$;\u0246/)$8#:\xA8#\"\"!)(#'#(\"'#&'#=.\" 7\xA7"),
    peg$decode("<%;\u01EA/@#;\u0246/7$;\x7F.\" &\"/)$8#:\xAA#\"\" )(#'#(\"'#&'#=.\" 7\xA9"),
    peg$decode("<%;\u0217/D#;\u0246/;$;\u0214/2$;\u0246/)$8$:\xAC$\"#!)($'#(#'#(\"'#&'#=.\" 7\xAB"),
    peg$decode(";\x91.S &;\u0100.M &;\u0167.G &;\x82.A &;\x81.; &;\x8B.5 &;\x85./ &;\x89.) &;\x8A.# &;\x9B"),
    peg$decode("<%;\u01D2.# &;\u01E5/@#;\u0246/7$;\x83.\" &\"/)$8#:\xAE#\"\" )(#'#(\"'#&'#=.\" 7\xAD"),
    peg$decode("<%;\u01C9/^#;\u0246/U$;\x84.\" &\"/G$;\x83.\" &\"/9$;\x87.\" &\"/+$8%:\xB0%$$\"! )(%'#($'#(#'#(\"'#&'#=.\" 7\xAF"),
    peg$decode("%;\u022D/1#;\u0246/($8\":\xB1\"!!)(\"'#&'#"),
    peg$decode("%;\u01DD.) &;\u01F5.# &;\u01E8/1#;\u0246/($8\":\xB2\"!!)(\"'#&'#"),
    peg$decode("<%;\u0222/N#;\u0246/E$;\x83.\" &\"/7$;\x86.\" &\"/)$8$:\xB4$\"# )($'#(#'#(\"'#&'#=.\" 7\xB3"),
    peg$decode("<%%;\u022C/,#;\u0246/#$+\")(\"'#&'#.\" &\"/?#;\x88.\" &\"/1$;\x87/($8#:w#! )(#'#(\"'#&'#=.\" 7\xB5"),
    peg$decode("%;\u0187/1#;\u0246/($8\":\xB6\"!!)(\"'#&'#"),
    peg$decode("%;\u0225/1#;\u0246/($8\":\xB7\"!!)(\"'#&'#"),
    peg$decode("<%;\x88/2#;\x87/)$8\":\xB9\"\"! )(\"'#&'#=.\" 7\xB8"),
    peg$decode("<%;\u021D/J#;\u0246/A$;\x88.\" &\"/3$;\x87/*$8$:\xBB$##! )($'#(#'#(\"'#&'#=.\" 7\xBA"),
    peg$decode("<%;\x8C/N#;\u0180/E$;\u0246/<$;\x8D/3$;\u0246/*$8%:\xBD%#$#!)(%'#($'#(#'#(\"'#&'#=.\" 7\xBC"),
    peg$decode("<%;\u01C1/D#;\u0246/;$;\u0228/2$;\u0246/)$8$:\xBF$\"#!)($'#(#'#(\"'#&'#=.\" 7\xBE"),
    peg$decode(";\x8E.# &;\x8F"),
    peg$decode("<%;\u021E/M#;\u0246/D$;\u022C/;$;\u0246/2$;\u0180/)$8%:\xC1%\"$ )(%'#($'#(#'#(\"'#&'#=.\" 7\xC0"),
    peg$decode("<%;\u01BE/I#;\u0246/@$;\x90.\" &\"/2$;\u0111/)$8$:\xC3$\"# )($'#(#'#(\"'#&'#=.\" 7\xC2"),
    peg$decode("%;\u01D1/1#;\u0246/($8\":\xB7\"!!)(\"'#&'#"),
    peg$decode("%;\x92/2#;\xAC/)$8\":\xC4\"\"! )(\"'#&'#"),
    peg$decode("<%;\x93.\" &\"/1#;\u0246/($8\":*\"!!)(\"'#&'#=.\" 7\xC5"),
    peg$decode("%;\u0239/J#;\u0246/A$;\x94.\" &\"/3$;\x95/*$8$:\xC6$##! )($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0219/1#;\u0246/($8\":\xB7\"!!)(\"'#&'#"),
    peg$decode("%;\x97/B#;\u0246/9$$;\x960#*;\x96&/)$8#:\xC7#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01A7/:#;\x97/1$;\u0246/($8#:\x9A#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u018C/2#;\x98/)$8\":\xC9\"\"! )(\"'#&'#=.\" 7\xC8"),
    peg$decode("%;\u01C4/:#;\u0246/1$;\x99/($8#:\xCA#! )(#'#(\"'#&'#"),
    peg$decode("%;\u01A5/C#;\x9A/:$;\u0246/1$;\u01A6/($8$: $!\")($'#(#'#(\"'#&'#"),
    peg$decode("%;\x92/2#;\xAD/)$8\":\xCB\"\"! )(\"'#&'#"),
    peg$decode(";\x9C.; &;\x9E.5 &;\x9F./ &;\xA1.) &;\xA3.# &;\xA5"),
    peg$decode("<%;\u01C6/\x8B#;\u0246/\x82$%;\u01DA/,#;\u0246/#$+\")(\"'#&'#.\" &\"/a$;u/X$;\u0246/O$;\u01C4/F$;\u0246/=$;\x9D/4$;\u0246/+$8):\xCD)$(&%!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xCC"),
    peg$decode(";\u017E.) &;-.# &;?"),
    peg$decode("<%;\u01E0/f#;\u0246/]$%;\u01DA/,#;\u0246/#$+\")(\"'#&'#.\" &\"/<$;\x9D/3$;\u0246/*$8%:\xCF%#$\"!)(%'#($'#(#'#(\"'#&'#=.\" 7\xCE"),
    peg$decode("<%;\u0233/@#;\u0246/7$;\xA0.\" &\"/)$8#:\xD1#\"\" )(#'#(\"'#&'#=.\" 7\xD0"),
    peg$decode("%;\u017E/1#;\u0246/($8\":\xD2\"!!)(\"'#&'#"),
    peg$decode("<%;\u01C2/@#;\u0246/7$;\xA2.\" &\"/)$8#:\xD4#\"\" )(#'#(\"'#&'#=.\" 7\xD3"),
    peg$decode("%;\u0180.) &;\u0188.# &;\u017E/1#;\u0246/($8\":\xD5\"!!)(\"'#&'#"),
    peg$decode("<%;\u021C/I#;\u0246/@$;\xA4.\" &\"/2$;\u0246/)$8$:\xD4$\"#!)($'#(#'#(\"'#&'#=.\" 7\xD6"),
    peg$decode("%;\u0180.) &;\u0188.# &;\u0186/1#;\u0246/($8\":\xD7\"!!)(\"'#&'#"),
    peg$decode("<%;\u0215/S#;\u0246/J$;\u018B/A$;\u0246/8$;\xA6.\" &\"/*$8%:\xD9%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\xD8"),
    peg$decode("%;\u01A5/C#;\xA7/:$;\u0246/1$;\u01A6/($8$:\xDA$!\")($'#(#'#(\"'#&'#.D &%;\u01B1/:#;\xA7/1$;\u0246/($8#:\xDA#!!)(#'#(\"'#&'#"),
    peg$decode(";\xA9.) &;\xA8.# &;\xAB"),
    peg$decode(";5.) &;/.# &;3"),
    peg$decode("%;\xAA/<#9:\xDB ! -\"\"&!&#/($8\":\xDC\"!!)(\"'#&'#"),
    peg$decode("%$;\u0198/&#0#*;\u0198&&&#/' 8!:\xDD!! )"),
    peg$decode("%;\xAA/' 8!:\xDE!! )"),
    peg$decode(";\xAD./ &;\xE2.) &;\xF7.# &;\xFE"),
    peg$decode("<%;\xB3/X#;\u0246/O$;\xAE.\" &\"/A$;\u0246/8$;\xAF.\" &\"/*$8%:\xE0%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\xDF"),
    peg$decode("<%;\u0210/L#;\u0246/C$;\u01CB/:$;\u0246/1$;\xDD/($8%:\xE2%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xE1"),
    peg$decode("<%;\u0205/S#;\u0246/J$;u/A$;\u0246/8$;\xB0.\" &\"/*$8%:\xE4%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\xE3"),
    peg$decode("<%;\xB1/2#;u/)$8\":\xE6\"\"! )(\"'#&'#=.\" 7\xE5"),
    peg$decode(";\xB2.# &;\u01A7"),
    peg$decode("%;\u020D/1#;\u0246/($8\":\xB7\"!!)(\"'#&'#"),
    peg$decode("%;\xB5/B#;\u0246/9$$;\xB40#*;\xB4&/)$8#:\xE7#\"\" )(#'#(\"'#&'#"),
    peg$decode("<%;\xF4/D#;\u0246/;$;\xB5/2$;\u0246/)$8$:\xE9$\"#!)($'#(#'#(\"'#&'#=.\" 7\xE8"),
    peg$decode(";\xB6.# &;\xDC"),
    peg$decode("%;\xB7/U#;\xBD.\" &\"/G$;\xBE.\" &\"/9$;\xBF.\" &\"/+$8$:\xEA$$#\"! )($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u0226/R#;\u0246/I$;\xB8.\" &\"/;$;\u0246/2$;\xBB/)$8%:\xEC%\"\" )(%'#($'#(#'#(\"'#&'#=.\" 7\xEB"),
    peg$decode("<;\xB9.# &;\xBA=.\" 7\xED"),
    peg$decode("%;\u01E1/1#;\u0246/($8\":\xEE\"!!)(\"'#&'#"),
    peg$decode("%;\u01C0/1#;\u0246/($8\":\xEF\"!!)(\"'#&'#"),
    peg$decode("%;\xC1/B#;\u0246/9$$;\xBC0#*;\xBC&/)$8#:\xC7#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01A7/:#;\xC1/1$;\u0246/($8#:-#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u01EE/D#;\u0246/;$;\xC5/2$;\u0246/)$8$:\xF1$\"#!)($'#(#'#(\"'#&'#=.\" 7\xF0"),
    peg$decode("<%;\u0238/D#;\u0246/;$;u/2$;\u0246/)$8$:\xF3$\"#!)($'#(#'#(\"'#&'#=.\" 7\xF2"),
    peg$decode("<%;\u01F1/e#;\u0246/\\$;\u01CB/S$;\u0246/J$;v/A$;\u0246/8$;\xC0.\" &\"/*$8':\xF5'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xF4"),
    peg$decode("<%;\u01F2/D#;\u0246/;$;u/2$;\u0246/)$8$:\xF7$\"#!)($'#(#'#(\"'#&'#=.\" 7\xF6"),
    peg$decode(";\xC2.# &;\xC4"),
    peg$decode("%;\xC3.\" &\"/2#;\xE0/)$8\":\xF8\"\"! )(\"'#&'#"),
    peg$decode("%;\u019A/2#;\u01A8/)$8\":\xF9\"\"! )(\"'#&'#"),
    peg$decode("%;u/@#;\u0246/7$;\xD2.\" &\"/)$8#:\xFA#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\xC9/B#;\u0246/9$$;\xC60#*;\xC6&/)$8#:\xFB#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\xC7.# &;\xC8/7#;\xD9.\" &\"/)$8\":\xFC\"\"! )(\"'#&'#"),
    peg$decode("<%;\u01A7/:#;\xC9/1$;\u0246/($8#:\xFE#!!)(#'#(\"'#&'#=.\" 7\xFD"),
    peg$decode("<%;\xD3/D#;\u0246/;$;\xC9/2$;\u0246/)$8$:\u0100$\"#!)($'#(#'#(\"'#&'#=.\" 7\xFF"),
    peg$decode(";\xD0.5 &;?./ &;\xCA.) &;\xCB.# &;\xD1"),
    peg$decode("%;\u017F/S#;\u0246/J$;\xF2/A$;\u0246/8$;\xD2.\" &\"/*$8%:\u0101%#$\" )(%'#($'#(#'#(\"'#&'#"),
    peg$decode("<%;\xCC/@#;\u0246/7$;\xCD.\" &\"/)$8#:\u0103#\"\" )(#'#(\"'#&'#=.\" 7\u0102"),
    peg$decode("<%;\u0180/@#;\u0246/7$;\xD2.\" &\"/)$8#:\u0105#\"\" )(#'#(\"'#&'#=.\" 7\u0104"),
    peg$decode("<;\xCE.# &;\xCF=.\" 7\u0106"),
    peg$decode("%;\u01F8/V#;\u0246/M$;\u01CB/D$;\u0246/;$;\u0188/2$;\u0246/)$8&:\u0107&\"%!)(&'#(%'#($'#(#'#(\"'#&'#"),
    peg$decode("%;p/;#;\u01F8/2$;\u0246/)$8#:\u0108#\"\"!)(#'#(\"'#&'#"),
    peg$decode("<%;\u01A5/R#;\xC5/I$;\u0246/@$;\u01A6/7$;\xD2.\" &\"/)$8%:\u010A%\"# )(%'#($'#(#'#(\"'#&'#=.\" 7\u0109"),
    peg$decode("<%;\x99/7#;\xD2.\" &\"/)$8\":\u010C\"\"! )(\"'#&'#=.\" 7\u010B"),
    peg$decode("<%%;\u01C4/Q#%%<;\u0198.# &;\u023D=.##&&!&'#/,#;\u0246/#$+\")(\"'#&'#/#$+\")(\"'#&'#.\" &\"/;#;\u019A/2$;\u0246/)$8#:\u010E#\"\"!)(#'#(\"'#&'#=.\" 7\u010D"),
    peg$decode("<%;\xD4.\" &\"/J#;\u0246/A$;\xD5.\" &\"/3$;\u0201/*$8$:\u0110$##! )($'#(#'#(\"'#&'#=.\" 7\u010F"),
    peg$decode("%;\u0207/1#;\u0246/($8\":\x97\"!!)(\"'#&'#"),
    peg$decode(";\xD6.# &;\xD8"),
    peg$decode("%;\u0203.) &;\u0221.# &;\u01EF/@#;\u0246/7$;\xD7.\" &\"/)$8#:\u0111#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u0211/1#;\u0246/($8\":\u0112\"!!)(\"'#&'#"),
    peg$decode("%;\u01FA.# &;\u01D6/1#;\u0246/($8\":\u0112\"!!)(\"'#&'#"),
    peg$decode("<%;\xDA.# &;\xDB/1#;\u0246/($8\":\u0114\"!!)(\"'#&'#=.\" 7\u0113"),
    peg$decode("<%;\u020E/;#;\u0246/2$;u/)$8#:\u0116#\"\" )(#'#(\"'#&'#=.\" 7\u0115"),
    peg$decode("<%;\u0232/;#;\u0246/2$;\xEB/)$8#:\u0118#\"\" )(#'#(\"'#&'#=.\" 7\u0117"),
    peg$decode("<%;\u0234/;#;\u0246/2$;\xF0/)$8#:\u011A#\"\" )(#'#(\"'#&'#=.\" 7\u0119"),
    peg$decode("%;\xDF/B#;\u0246/9$$;\xDE0#*;\xDE&/)$8#:\u011B#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01A7/:#;\xDF/1$;\u0246/($8#:\u011C#!!)(#'#(\"'#&'#"),
    peg$decode("<%;u/@#;\u0246/7$;\u0134.\" &\"/)$8#:\u011E#\"\" )(#'#(\"'#&'#=.\" 7\u011D"),
    peg$decode("<;\u01A9=.\" 7\u011F"),
    peg$decode("<;\u021F.5 &;\u0222./ &;\u01BC.) &;\u01EB.# &;\u01F4=.\" 7\u0120"),
    peg$decode("<%;\xE3/;#;\u0246/2$;\xE7/)$8#:\u0122#\"\" )(#'#(\"'#&'#=.\" 7\u0121"),
    peg$decode(";\xE4.# &;\xE5"),
    peg$decode("<%;\u01FB/@#;\u0246/7$;\xE6.\" &\"/)$8#:\u0124#\"\" )(#'#(\"'#&'#=.\" 7\u0123"),
    peg$decode("<%;\u021F/1#;\u0246/($8\":\u0126\"!!)(\"'#&'#=.\" 7\u0125"),
    peg$decode("<%;\u020F/;#;\u0246/2$;\xE1/)$8#:\u0128#\"\" )(#'#(\"'#&'#=.\" 7\u0127"),
    peg$decode("%;\xE8/2#;\xEA/)$8\":\u0129\"\"! )(\"'#&'#"),
    peg$decode("<%;\xE9/2#;\u018C/)$8\":\u012B\"\"! )(\"'#&'#=.\" 7\u012A"),
    peg$decode("<%;\u01FE/,#;\u0246/#$+\")(\"'#&'#=.\" 7\u012C"),
    peg$decode("<%;\xEE.) &;\x9A.# &;\xF3/1#;\u0246/($8\":\u012D\"!!)(\"'#&'#=.\" 7\u0119"),
    peg$decode("<%;\u01A5/T#;\xED/K$;\u0246/B$$;\xEC0#*;\xEC&/2$;\u01A6/)$8%:\u012F%\"#!)(%'#($'#(#'#(\"'#&'#=.\" 7\u012E"),
    peg$decode("%;\u01A7/:#;\xED/1$;\u0246/($8#:\u0130#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u017D/' 8!:\u0132!! )=.\" 7\u0131"),
    peg$decode("<%;\xEF/2#;\xF0/)$8\":\u0133\"\"! )(\"'#&'#=.\" 7\u0119"),
    peg$decode("<%;\u0234/1#;\u0246/($8\":\xB7\"!!)(\"'#&'#=.\" 7\u0134"),
    peg$decode("%;\xF2/B#;\u0246/9$$;\xF10#*;\xF1&/)$8#:\u0135#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01A7/:#;\xF2/1$;\u0246/($8#:\x9A#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u01A5/C#;v/:$;\u0246/1$;\u01A6/($8$:\u0137$!\")($'#(#'#(\"'#&'#=.\" 7\u0136"),
    peg$decode("<%;\u01DB/;#;\u0246/2$;\u0234/)$8#:\u0139#\"\" )(#'#(\"'#&'#=.\" 7\u0138"),
    peg$decode("<%;\xF5.) &;\u01FD.# &;\u01E7/' 8!:\xB7!! )=.\" 7\u013A"),
    peg$decode("<%;\u022F/@#;\u0246/7$;\xF6.\" &\"/)$8#:\u013C#\"\" )(#'#(\"'#&'#=.\" 7\u013B"),
    peg$decode("%;\u01C0/1#;\u0246/($8\":\u013D\"!!)(\"'#&'#"),
    peg$decode("<%;\xF8/\x8A#;\xF9.\" &\"/|$;\xCB/s$;\u0246/j$;\xFA/a$;\xBE.\" &\"/S$;\xAE.\" &\"/E$;\u0246/<$;\xAF.\" &\"/.$8):\u013F)'('&$#\" )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u013E"),
    peg$decode("<%;\u0231/1#;\u0246/($8\":\xB7\"!!)(\"'#&'#=.\" 7\u0140"),
    peg$decode("<%;\u020F/C#;\u0246/:$;\xE1/1$;\u0246/($8$:\u0142$!!)($'#(#'#(\"'#&'#=.\" 7\u0141"),
    peg$decode("<%;\u0227/C#;\u0246/:$;\xFB/1$;\u0246/($8$:\u0144$!!)($'#(#'#(\"'#&'#=.\" 7\u0143"),
    peg$decode("%;\xFD/9#$;\xFC0#*;\xFC&/)$8\":\u0135\"\"! )(\"'#&'#"),
    peg$decode("%;\u0246/:#;\u01A7/1$;\xFD/($8#:\u0130#! )(#'#(\"'#&'#"),
    peg$decode("<%;\u0182/M#;\u0246/D$;\u01B1/;$;u/2$;\u0246/)$8%:\u0146%\"$!)(%'#($'#(#'#(\"'#&'#=.\" 7\u0145"),
    peg$decode("<%;\xFF/h#;\xCB/_$;\u0246/V$;\xBE.\" &\"/H$;\xAE.\" &\"/:$;\xAF.\" &\"/,$8&:\u0148&%%$\"! )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0147"),
    peg$decode("<%;\u01DE/C#;\u0246/:$;\u01EE/1$;\u0246/($8$:\xB7$!#)($'#(#'#(\"'#&'#=.\" 7\u0149"),
    peg$decode("<;\u0102.5 &;\u0103./ &;\u0104.) &;\u0105.# &;\u0106=.\" 7\u014A"),
    peg$decode("%;\u01D5/1#;\u0246/($8\":\xB7\"!!)(\"'#&'#"),
    peg$decode("%%<%;\u0101/>#;\u01F7./ &;\u022E.) &;\u0235.# &;\u0236/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0107/($8\":\u0130\"! )(\"'#&'#"),
    peg$decode("%%<%;\u0101/>#;\u0228./ &;\u022E.) &;\u0235.# &;\u0236/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0148/($8\":\u0130\"! )(\"'#&'#"),
    peg$decode("%%<%;\u0101/>#;\u0228./ &;\u01F7.) &;\u0235.# &;\u0236/#$+\")(\"'#&'#=.##&&!&'#/1#;\u014C/($8\":\u0130\"! )(\"'#&'#"),
    peg$decode("%%<%;\u0101/>#;\u0228./ &;\u01F7.) &;\u022E.# &;\u0236/#$+\")(\"'#&'#=.##&&!&'#/1#;\u015B/($8\":\u0130\"! )(\"'#&'#"),
    peg$decode("%%<%;\u0101/>#;\u0228./ &;\u01F7.) &;\u022E.# &;\u0235/#$+\")(\"'#&'#=.##&&!&'#/1#;\u015F/($8\":\u0130\"! )(\"'#&'#"),
    peg$decode("<%;\u0108/T#;\u010A.\" &\"/F$;\u0180/=$;\u0246/4$;\u010B/+$8%:\u014C%$$#\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u014B"),
    peg$decode("%;\u0101/J#;\u0109.\" &\"/<$;\u0228/3$;\u0246/*$8$:\u014D$##\"!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u022A.# &;\u0229/1#;\u0246/($8\":\u014E\"!!)(\"'#&'#"),
    peg$decode("<%;\u01F3/N#;\u0246/E$;p/<$;\u01E9/3$;\u0246/*$8%:\u0150%#$\"!)(%'#($'#(#'#(\"'#&'#=.\" 7\u014F"),
    peg$decode(";\u010C.# &;\u0147"),
    peg$decode("<%;\u01A5/Z#;\u010E/Q$$;\u01100#*;\u0110&/A$;\u01A6/8$;\u010D.\" &\"/*$8%:\u0152%##\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u0151"),
    peg$decode("%;\u023A/D#;\u0246/;$;\u0224/2$;\u0246/)$8$:\u0153$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0111/B#;\u0246/9$$;\u010F0#*;\u010F&/)$8#:\u0135#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01A7/:#;\u0111/1$;\u0246/($8#:\xB1#!!)(#'#(\"'#&'#"),
    peg$decode("%;\u01A7.\" &\"/1#;\u0125/($8\":\u0154\"! )(\"'#&'#"),
    peg$decode("<%;\u0112/O#;\u0246/F$;\u0113.\" &\"/8$;\u0114.\" &\"/*$8$:\u0156$##! )($'#(#'#(\"'#&'#=.\" 7\u0155"),
    peg$decode("%;\u019A/=#%<;\u0246=/##&'!&&#/($8\":w\"!!)(\"'#&'#.\\ &%%<;\u0113.) &;\u0116.# &;\u0125=.##&&!&'#/:#;\u0246/1$;\u019D/($8#:w#! )(#'#(\"'#&'#"),
    peg$decode("<%;&/1#;\u0246/($8\":\u0158\"!!)(\"'#&'#=.\" 7\u0157"),
    peg$decode("%;\u0116/B#$;\u01150#*;\u0115&/2$;\u0246/)$8#:\u0135#\"\"!)(#'#(\"'#&'#"),
    peg$decode("%;\u0246/1#;\u0116/($8\":\u0130\"! )(\"'#&'#"),
    peg$decode("<%;\u0117.\" &\"/A#;\u0119/8$;\u0117.\" &\"/*$8#:\u015A##\"! )(#'#(\"'#&'#=.\" 7\u0159"),
    peg$decode("%$;\u0118/&#0#*;\u0118&&&#/' 8!:\u015B!! )"),
    peg$decode("<%;\u01D4/C#;\u0246/:$;\u019A/1$;\u0246/($8$:\u015D$!!)($'#(#'#(\"'#&'#=.\" 7\u015C"),
    peg$decode(";\u011B.; &;\u011E.5 &;\u0121./ &;\u0122.) &;\u0124.# &;\u011A"),
    peg$decode("<%;\u013A/' 8!:\u015F!! )=.\" 7\u015E"),
    peg$decode("<%;\u011C/U#;\u0134.\" &\"/G$;\u0135.\" &\"/9$;\u011D.\" &\"/+$8$:\u0161$$#\"! )($'#(#'#(\"'#&'#=.\" 7\u0160"),
    peg$decode("<%;\u0216.# &;\u0215/D#;\u0246/;$;\u0202/2$;\u0246/)$8$:\u0163$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0162"),
    peg$decode("<%;\u01C7/1#;\u0246/($8\":\u0165\"!!)(\"'#&'#=.\" 7\u0164"),
    peg$decode("%;\u011F/@#;\u0135.\" &\"/2$;\u0246/)$8#:\u0166#\"\"!)(#'#(\"'#&'#"),
    peg$decode("<%;\u0120.# &;\u0230/1#;\u0246/($8\":\u0112\"!!)(\"'#&'#=.\" 7\u0167"),
    peg$decode("<%;p.\" &\"/2#;\u020B/)$8\":\u0169\"\"! )(\"'#&'#=.\" 7\u0168"),
    peg$decode("<;\u0137=.\" 7\u016A"),
    peg$decode("<%;\u01DB/D#;\u0246/;$;\u0123/2$;\u0246/)$8$:\u016C$\"#!)($'#(#'#(\"'#&'#=.\" 7\u016B"),
    peg$decode(";Q./ &;5.) &;,.# &;3"),
    peg$decode("<%;\u0132/' 8!:\u016E!! )=.\" 7\u016D"),
    peg$decode("<%;\u0117.\" &\"/J#;\u0126/A$;\u0246/8$;\u0117.\" &\"/*$8$:\u0170$##\" )($'#(#'#(\"'#&'#=.\" 7\u016F"),
    peg$decode(";\u0138.) &;\u0128.# &;\u0127"),
    peg$decode("<%;\u0137/' 8!:\u0172!! )=.\" 7\u0171"),
    peg$decode("<%;\u0129/J#;\u0246/A$;\u012E/8$;\u0135.\" &\"/*$8$:\u0174$##! )($'#(#'#(\"'#&'#=.\" 7\u0173"),
    peg$decode("%;\u012A.# &;\u012B/1#;\u0246/($8\":\u0175\"!!)(\"'#&'#"),
    peg$decode("<%;\u0216/;#;\u0246/2$;\u0202/)$8#:\u0176#\"\" )(#'#(\"'#&'#=.\" 7\u0162"),
    peg$decode("<%;\u0230/' 8!:\u0178!! )=.\" 7\u0177"),
    peg$decode("%;\u01A5/T#;\u0130/K$;\u0246/B$$;\u012F0#*;\u012F&/2$;\u01A6/)$8%:\u0179%\"#!)(%'#($'#(#'#(\"'#&'#"),
    peg$decode("%;\u012C/' 8!:\u017A!! )"),
    peg$decode("%;\u012C/' 8!:\u017B!! )"),
    peg$decode("%;\u01A7/:#;\u0130/1$;\u0246/($8#:\u0130#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u0131/O#;\u0246/F$;\u0134.\" &\"/8$;\u011D.\" &\"/*$8$:\u017D$##! )($'#(#'#(\"'#&'#=.\" 7\u017C"),
    peg$decode("%;\xED/\\#%<%;\u0246/8#;\u01B8.) &;\u01A6.# &;\u0134/#$+\")(\"'#&'#=/##&'!&&#/($8\":w\"!!)(\"'#&'#.# &;u"),
    peg$decode("<%$;\u0133/&#0#*;\u0133&&&#/' 8!:\u017F!! )=.\" 7\u017E"),
    peg$decode("%;\u01D0/C#;\u0246/:$;\u0186/1$;\u0246/($8$:w$!!)($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u01C5.# &;\u01DF/1#;\u0246/($8\":\u0181\"!!)(\"'#&'#=.\" 7\u0180"),
    peg$decode("%;\u0136/;#;\xE1/2$;\u0246/)$8#:\u0182#\"\"!)(#'#(\"'#&'#"),
    peg$decode("<%;\u020E/D#;\u0246/;$;\u01D3/2$;\u0246/)$8$:\u0184$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0183"),
    peg$decode("%;\u01CF/;#;\u0246/2$;Q/)$8#:\u0185#\"\" )(#'#(\"'#&'#"),
    peg$decode("<%;\u0139/E#;\xEB/<$;\u013A/3$;\u0246/*$8$:\u0187$##\"!)($'#(#'#(\"'#&'#=.\" 7\u0186"),
    peg$decode("<%;\u01ED/D#;\u0246/;$;\u0202/2$;\u0246/)$8$:\u0189$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0188"),
    peg$decode("%;\u013B/F#;\u013C.\" &\"/8$;\u0145.\" &\"/*$8#:\u018A##\"! )(#'#(\"'#&'#"),
    peg$decode("<%;\u021A/D#;\u0246/;$;\u018C/2$;\u0246/)$8$:\u018C$\"#!)($'#(#'#(\"'#&'#=.\" 7\u018B"),
    peg$decode("%;\u013E/B#;\u0246/9$$;\u013D0#*;\u013D&/)$8#:\u018D#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u013E/1#;\u0246/($8\":\u013D\"!!)(\"'#&'#"),
    peg$decode("<;\u013F.# &;\u0144=.\" 7\u018E"),
    peg$decode("%;\u020E/T#;\u0246/K$;\u01DE.# &;\u0231/<$;\u0246/3$;\u0140/*$8%:\u018F%#$\" )(%'#($'#(#'#(\"'#&'#"),
    peg$decode("<;\u0141.) &;\u0142.# &;\u0143=.\" 7\u0190"),
    peg$decode("%;\u0227/J#;\u0246/A$;\u020B.# &;\u01DB/2$;\u0246/)$8$:\u0191$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u01CC.# &;\u0220/1#;\u0246/($8\":\u0192\"!!)(\"'#&'#"),
    peg$decode("%;\u0208/D#;\u0246/;$;\u01BD/2$;\u0246/)$8$:\u0193$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0206/D#;\u0246/;$;\u019A/2$;\u0246/)$8$:\u0194$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("<%;p.\" &\"/J#;\u01DC/A$;\u0246/8$;\u0146.\" &\"/*$8$:\u0196$##\" )($'#(#'#(\"'#&'#=.\" 7\u0195"),
    peg$decode("%;\u01F9/J#;\u0246/A$;\u01DD.# &;\u01F5/2$;\u0246/)$8$:\u0197$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u015E/' 8!:\u0198!! )"),
    peg$decode("<%;\u0149/c#;\u010A.\" &\"/U$;\u0188/L$;\u0246/C$;\u014B/:$;\xBE.\" &\"/,$8&:\u019A&%%$#! )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0199"),
    peg$decode("%;\u0101/J#;\u014A.\" &\"/<$;\u01F7/3$;\u0246/*$8$:\u019B$##\"!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0230/1#;\u0246/($8\":\u019C\"!!)(\"'#&'#"),
    peg$decode("<%;\u020E/N#;\u0246/E$;\u0180/<$;\u0246/3$;\u012D/*$8%:\u019E%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u019D"),
    peg$decode("<%;\u014D/\xA6#;\u010A.\" &\"/\x98$;\u0189.\" &\"/\x8A$;\u0246/\x81$;\u014E/x$;\u020E/o$;\u0246/f$;\u0180/]$;\u0246/T$;\u0156.\" &\"/F$;\u0157.\" &\"/8$;\u0158//$8,:\u01A0,(+*)'$\"! )(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u019F"),
    peg$decode("%;\u0101/J#;\u0109.\" &\"/<$;\u022E/3$;\u0246/*$8$:\u01A1$##\"!)($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u014F.\" &\"/2#;\u0151/)$8\":\u01A3\"\"! )(\"'#&'#=.\" 7\u01A2"),
    peg$decode("%;\u01C8.) &;\u01BF.# &;\u0150/1#;\u0246/($8\":\u01A4\"!!)(\"'#&'#"),
    peg$decode("%;\u01FC/;#;\u0246/2$;\u020C/)$8#:\u01A5#\"\" )(#'#(\"'#&'#"),
    peg$decode("<;\u0152.# &;\u0153=.\" 7\u01A6"),
    peg$decode("%;\u01DE.# &;\u01FB/1#;\u0246/($8\":\u01A7\"!!)(\"'#&'#"),
    peg$decode("%;\u0231/@#;\u0246/7$;\u0154.\" &\"/)$8#:\u01A8#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u020C/;#;\u0246/2$;\u0155/)$8#:\u01A9#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\xED/B#;\u0246/9$$;\xEC0#*;\xEC&/)$8#:\u0135#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01EC/c#;\u0246/Z$;\u01E3/Q$;\u0246/H$;\u0223.) &3\u01AA\"\"5)7\u01AB/3$;\u0246/*$8&:\u01AC&#%#!)(&'#(%'#($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u0237/D#;\u0246/;$;u/2$;\u0246/)$8$:\u01AD$\"#!)($'#(#'#(\"'#&'#=.\" 7\x8B"),
    peg$decode("<%;\u01C9/W#;\u0246/N$;\u0159/E$;\u0246/<$;\u01E5/3$;\u0246/*$8&:\u01AF&#%#!)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01AE"),
    peg$decode("%$;\u015A/&#0#*;\u015A&&&#/' 8!:\u01B0!! )"),
    peg$decode("%;\x91/:#;\u0246/1$;$/($8#:\"#!\")(#'#(\"'#&'#"),
    peg$decode("<%;\u015D/T#;\u010A.\" &\"/F$;\u015C/=$;\u0246/4$;\u015E/+$8%:\u01B2%$$#\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u01B1"),
    peg$decode("%;\u018A/;#;\u0246/2$;\xEB/)$8#:\u01B3#\"\" )(#'#(\"'#&'#.# &;\u018A"),
    peg$decode("%;\u0101/J#;\u0109.\" &\"/<$;\u0235/3$;\u0246/*$8$:\u01B4$##\"!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u01C4/D#;\u0246/;$;\xAD/2$;\u0246/)$8$:\u0133$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u0160/f#;\u010A.\" &\"/X$;\u0180/O$;\u0246/F$;\u0232/=$;\u0246/4$;\u0161/+$8':\u01B6'$&%$ )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01B5"),
    peg$decode("%;\u0101/N#;\u0236/E$;\u0246/<$;\u0228/3$;\u0246/*$8%:\u01B7%#$#!)(%'#($'#(#'#(\"'#&'#"),
    peg$decode("%;\u019C/@#;\u0246/7$;\u0162.\" &\"/)$8#:\u01B8#\"\" )(#'#(\"'#&'#"),
    peg$decode("<%;\u01A5/Z#;\u0246/Q$;\u0163.\" &\"/C$;\u0246/:$;\u01A6/1$;\u0246/($8&:\u01BA&!#)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01B9"),
    peg$decode("%;\u0165/9#$;\u01640#*;\u0164&/)$8\":\u01BB\"\"! )(\"'#&'#"),
    peg$decode("%;\u0246/H#;\u01A7/?$;\u0246/6$;\u0165.\" &\"/($8$:\u01BC$! )($'#(#'#(\"'#&'#"),
    peg$decode("%%<%;\u019A/;#;\u0246/2$;&.# &;\u0116/#$+#)(#'#(\"'#&'#=.##&&!&'#/:#;u/1$;\u0246/($8#:\u0137#!!)(#'#(\"'#&'#.x &%;\u0166/n#%%<;\u0198=.##&&!&'#/,#;\u0246/#$+\")(\"'#&'#/F$;\u0113.\" &\"/8$;\u0114.\" &\"/*$8$:\u0156$##! )($'#(#'#(\"'#&'#"),
    peg$decode(";\u019A.# &;\u019D"),
    peg$decode("<%;\u0168/;#;\u0180/2$;\u0246/)$8#:\u01BE#\"\"!)(#'#(\"'#&'#=.\" 7\u01BD"),
    peg$decode("<%;\u01E2/J#;\u0246/A$;\u0169/8$;\u016A.\" &\"/*$8$:\u01C0$##! )($'#(#'#(\"'#&'#=.\" 7\u01BF"),
    peg$decode("<%;\u0228./ &;\u01F7.) &;\u022E.# &;\u0235/1#;\u0246/($8\":\u0112\"!!)(\"'#&'#=.\" 7\u01C1"),
    peg$decode("<%;\u01F3/D#;\u0246/;$;\u01E9/2$;\u0246/)$8$:\u01C3$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01C2"),
    peg$decode("<%;\u01B3/,#;\u01B3/#$+\")(\"'#&'#=.\" 7\u01C4"),
    peg$decode("<;\u01AF=.\" 7\u01C5"),
    peg$decode("<;\u01B0=.\" 7\u01C6"),
    peg$decode("<;\u01A9=.\" 7\u01C7"),
    peg$decode("<;\u01BA=.\" 7\u01C8"),
    peg$decode("<;\u01B4=.\" 7\u01C9"),
    peg$decode("<%;\u01B5/,#;\u01B5/#$+\")(\"'#&'#=.\" 7\u01CA"),
    peg$decode("<%;\u01B6/,#;\u01B6/#$+\")(\"'#&'#=.\" 7\u01CB"),
    peg$decode("<;\u01B2=.\" 7\u01CC"),
    peg$decode("<;\u01B3=.\" 7\u01CD"),
    peg$decode("<;\u01B5=.\" 7\u01CE"),
    peg$decode("<;\u01B6=.\" 7\u01CF"),
    peg$decode("<%;\u01B5/,#;\u01B1/#$+\")(\"'#&'#=.\" 7\u01D0"),
    peg$decode("<%;\u01B6/,#;\u01B1/#$+\")(\"'#&'#=.\" 7\u01D1"),
    peg$decode("<%;\u01B1/1#;\u01B1.\" &\"/#$+\")(\"'#&'#=.\" 7\u01D2"),
    peg$decode("<%;\u01B7/,#;\u01B1/#$+\")(\"'#&'#=.\" 7\u01D3"),
    peg$decode("<%;\u01B5/,#;\u01B6/#$+\")(\"'#&'#=.\" 7\u01D3"),
    peg$decode("<%;\u01FF/@#;\u0246/7$;p.\" &\"/)$8#:\u01D5#\"\" )(#'#(\"'#&'#=.\" 7\u01D4"),
    peg$decode("<;\u019A.# &;\u019D=.\" 7\u01D6"),
    peg$decode("<%;\u017D/' 8!:\u01D8!! )=.\" 7\u01D7"),
    peg$decode("<%;\u0181.\" &\"/2#;\u017D/)$8\":\u01DA\"\"! )(\"'#&'#=.\" 7\u01D9"),
    peg$decode("<%;\u0181.\" &\"/2#;\u017D/)$8\":\u01DC\"\"! )(\"'#&'#=.\" 7\u01DB"),
    peg$decode("%;\u017D/2#;\u01A8/)$8\":\u01DD\"\"! )(\"'#&'#"),
    peg$decode("<%;\u0184.) &;\u0185.# &;\u0183/2#;\u017D/)$8\":\u01DF\"\"! )(\"'#&'#=.\" 7\u01DE"),
    peg$decode("%;\u0246/& 8!:\u01E0! )"),
    peg$decode("%;\u0181/2#;\u0185/)$8\":\u01E1\"\"! )(\"'#&'#"),
    peg$decode("%;\u017D/2#;\u01A8/)$8\":D\"\"! )(\"'#&'#"),
    peg$decode("<%;\u017D/' 8!:\u01E3!! )=.\" 7\u01E2"),
    peg$decode("<%;\u017D/' 8!:\u01E5!! )=.\" 7\u01E4"),
    peg$decode("<%;\u0181.\" &\"/2#;\u017D/)$8\":\u01E7\"\"! )(\"'#&'#=.\" 7\u01E6"),
    peg$decode("<%;\u0181.\" &\"/2#;\u017D/)$8\":\u01E9\"\"! )(\"'#&'#=.\" 7\u01E8"),
    peg$decode("<%;\u0181.\" &\"/2#;\u017D/)$8\":\u01EB\"\"! )(\"'#&'#=.\" 7\u01EA"),
    peg$decode("<%;\u0181.\" &\"/2#;\u017D/)$8\":\u01ED\"\"! )(\"'#&'#=.\" 7\u01EC"),
    peg$decode("<%;\u018D.# &;\u0180/1#;\u0246/($8\":\u01EF\"!!)(\"'#&'#=.\" 7\u01EE"),
    peg$decode("%;\u0180/;#;\u0246/2$;\xEB/)$8#:\u01F0#\"\" )(#'#(\"'#&'#"),
    peg$decode("<%;\u017D/' 8!:\u01F2!! )=.\" 7\u01F1"),
    peg$decode("<%;\u017D/' 8!:\u01F4!! )=.\" 7\u01F3"),
    peg$decode("<%;\u0191/=#%<;\u0198=.##&&!&'#/($8\":\u01F6\"!!)(\"'#&'#.\xC5 &%;\u0192/=#%<;\u0198=.##&&!&'#/($8\":\u01F7\"!!)(\"'#&'#.\x9B &%;\u0194/=#%<;\u0198=.##&&!&'#/($8\":\u01F8\"!!)(\"'#&'#.q &%;\u0195/=#%<;\u0198=.##&&!&'#/($8\":\u01F9\"!!)(\"'#&'#.G &%;\u0197/=#%<;\u0198=.##&&!&'#/($8\":\u01FA\"!!)(\"'#&'#=.\" 7\u01F5"),
    peg$decode("<%%3\u01FC\"\"5!7\u01FD.\" &\"/F#3\u01FE\"\"5#7\u01FF.\" &\"/2$3\u0200\"\"5$7\u0201/#$+#)(#'#(\"'#&'#.k &%3\u0202\"\"5$7\u0203.5 &3\u0204\"\"5&7\u0205.) &3\u0206\"\"5$7\u0207.\" &\"/2#3\u0208\"\"5$7\u0209/#$+\")(\"'#&'#.) &3\u020A\"\"5$7\u020B/' 8!:\u0112!! )=.\" 7\u01FB"),
    peg$decode("<%;\u0193.5 &3\u020D\"\"5%7\u020E.) &3\u020F\"\"5$7\u0210/' 8!:\u0112!! )=.\" 7\u020C"),
    peg$decode("<%3\u0212\"\"5&7\u0213/i#%$4(\"\"5!7)/,#0)*4(\"\"5!7)&&&#/2#3\u0214\"\"5)7\u0215/#$+\")(\"'#&'#.\" &\"/)$8\":\u0216\"\"! )(\"'#&'#=.\" 7\u0211"),
    peg$decode("<%3\u0218\"\"5'7\u0219.\x95 &3\u021A\"\"5'7\u021B.\x89 &3\u021C\"\"5'7\u021D.} &%3\u021E\"\"5$7\u021F/7#3\u0220\"\"5$7\u0221.\" &\"/#$+\")(\"'#&'#.S &%3\u0220\"\"5$7\u0221/7#3\u0222\"\"5%7\u0223.\" &\"/#$+\")(\"'#&'#.) &3\u0224\"\"5&7\u0225/' 8!:\u0112!! )=.\" 7\u0217"),
    peg$decode("<%%3\u0227\"\"5#7\u0228/V#2\u0229\"\"6\u02297\u022A.A &2\u022B\"\"6\u022B7\u022C.5 &2\u022D\"\"6\u022D7\u022E.) &3\u022F\"\"5$7\u0230/#$+\")(\"'#&'#.q &%3\u0231\"\"5#7\u0232.A &3\u0204\"\"5&7\u0205.5 &3\u0233\"\"5%7\u0234.) &3\u0202\"\"5$7\u0203.\" &\"/2#3\u0227\"\"5#7\u0228/#$+\")(\"'#&'#.# &;\u0196/' 8!:\u0112!! )=.\" 7\u0226"),
    peg$decode("%3\u0235\"\"5(7\u0236/d#%$4(\"\"5!7)/,#0)*4(\"\"5!7)&&&#/2#3\u0237\"\"5%7\u0238/#$+\")(\"'#&'#/)$8\":\u0239\"\"! )(\"'#&'#"),
    peg$decode("<%3\u023B\"\"5$7\u023C/' 8!:\u0112!! )=.\" 7\u023A"),
    peg$decode("4\u023D\"\"5!7\u023E"),
    peg$decode("%2\u023F\"\"6\u023F7\u0240/K#$4\u0241\"\"5!7\u0242/,#0)*4\u0241\"\"5!7\u0242&&&#/)$8\":\u0243\"\"! )(\"'#&'#"),
    peg$decode(";\u019B.# &;\u019C"),
    peg$decode(";\u019E./ &;\u01A2.) &;\u01A0.# &;\u01A1"),
    peg$decode("%%<;\u023B.# &;>=.##&&!&'#/J#$;\u0199.# &;\u0198/,#0)*;\u0199.# &;\u0198&&&#/($8\":\xDD\"! )(\"'#&'#"),
    peg$decode("%%<;\u023D.# &;>=.##&&!&'#/J#$;\u0199.# &;\u0198/,#0)*;\u0199.# &;\u0198&&&#/($8\":\u0244\"! )(\"'#&'#"),
    peg$decode("%;\u01A3/\x99#;\u0246/\x90$%$%%<;\u019F=.##&&!&'#/1#1\"\"5!7\u0245/#$+\")(\"'#&'#0G*%%<;\u019F=.##&&!&'#/1#1\"\"5!7\u0245/#$+\")(\"'#&'#&/\"!&,)/1$;\u019F/($8$:\u0246$!!)($'#(#'#(\"'#&'#"),
    peg$decode("%$4\u0247\"\"5!7\u02480)*4\u0247\"\"5!7\u0248&/5#;\u01A4/,$;\u0246/#$+#)(#'#(\"'#&'#"),
    peg$decode("%2\u0249\"\"6\u02497\u024A/k#$2\u024B\"\"6\u024B7\u024C.) &4\u024D\"\"5!7\u024E05*2\u024B\"\"6\u024B7\u024C.) &4\u024D\"\"5!7\u024E&/7$2\u0249\"\"6\u02497\u024A/($8#:\u024F#!!)(#'#(\"'#&'#"),
    peg$decode("%2\u0250\"\"6\u02507\u0251/k#$26\"\"6677.) &48\"\"5!7905*26\"\"6677.) &48\"\"5!79&/7$2\u0250\"\"6\u02507\u0251/($8#:\u0252#!!)(#'#(\"'#&'#"),
    peg$decode("%2\u0253\"\"6\u02537\u0254/k#$2\u0255\"\"6\u02557\u0256.) &4\u0257\"\"5!7\u025805*2\u0255\"\"6\u02557\u0256.) &4\u0257\"\"5!7\u0258&/7$2\u0253\"\"6\u02537\u0254/($8#:\u0259#!!)(#'#(\"'#&'#"),
    peg$decode("<%2\u025B\"\"6\u025B7\u025C/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u025A"),
    peg$decode("<%2\u025E\"\"6\u025E7\u025F/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u025D"),
    peg$decode("<%2\u0261\"\"6\u02617\u0262/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0260"),
    peg$decode("<%2\u0264\"\"6\u02647\u0265/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0263"),
    peg$decode("<%2\u0267\"\"6\u02677\u0268/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0266"),
    peg$decode("<%2\u026A\"\"6\u026A7\u026B/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0269"),
    peg$decode("<%2\u026D\"\"6\u026D7\u026E/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u026C"),
    peg$decode("<%2\u0270\"\"6\u02707\u0271/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u026F"),
    peg$decode("<%2\u0250\"\"6\u02507\u0251/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0272"),
    peg$decode("<%2\u0249\"\"6\u02497\u024A/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0273"),
    peg$decode("<%2\u0253\"\"6\u02537\u0254/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0274"),
    peg$decode("<%2\u0276\"\"6\u02767\u0277/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0275"),
    peg$decode("<%2\u0279\"\"6\u02797\u027A/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0278"),
    peg$decode("<%2\u027C\"\"6\u027C7\u027D/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u027B"),
    peg$decode("<%2\u027E\"\"6\u027E7\u027F/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u01D2"),
    peg$decode("<%2\u0281\"\"6\u02817\u0282/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0280"),
    peg$decode("<%2\u0284\"\"6\u02847\u0285/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0283"),
    peg$decode("<%2\u0286\"\"6\u02867\u0287/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u01C9"),
    peg$decode("<%2\u0288\"\"6\u02887\u0289/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u01CE"),
    peg$decode("<%2\u028A\"\"6\u028A7\u028B/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u01CF"),
    peg$decode("<%2\u028D\"\"6\u028D7\u028E/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u028C"),
    peg$decode("<%2\u0290\"\"6\u02907\u0291/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u028F"),
    peg$decode("<%2a\"\"6a7b/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0292"),
    peg$decode("<%2\u0294\"\"6\u02947\u0295/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0293"),
    peg$decode("<%2\u0297\"\"6\u02977\u0298/1#;\u0246/($8\":\"\"!!)(\"'#&'#=.\" 7\u0296"),
    peg$decode("%3\u0299\"\"5%7\u029A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u029B\"\"5&7\u029C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u029D\"\"5#7\u029E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u029F\"\"5%7\u02A0/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02A1\"\"5#7\u02A2/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02A3\"\"5%7\u02A4/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02A5\"\"5'7\u02A6/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02A7\"\"5#7\u02A8/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02A9\"\"5\"7\u02AA/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02AB\"\"5#7\u02AC/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02AD\"\"5&7\u02AE/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02AF\"\"5-7\u02B0/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02B1\"\"5&7\u02B2/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02B3\"\"5%7\u02B4/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02B5\"\"5'7\u02B6/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02B7\"\"5\"7\u02B8/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02B9\"\"5'7\u02BA/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02BB\"\"5$7\u02BC/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02BD\"\"5$7\u02BE/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02BF\"\"5%7\u02C0/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C1\"\"5'7\u02C2/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C3\"\"5&7\u02C4/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C5\"\"5&7\u02C6/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C7\"\"5(7\u02C8/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C9\"\"5*7\u02CA/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02CB\"\"5&7\u02CC/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02CD\"\"5%7\u02CE/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02CF\"\"5,7\u02D0/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D1\"\"5,7\u02D2/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D3\"\"517\u02D4/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D5\"\"5(7\u02D6/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D7\"\"5'7\u02D8/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D9\"\"5*7\u02DA/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02DB\"\"5(7\u02DC/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02DD\"\"5&7\u02DE/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02DF\"\"5$7\u02E0/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E1\"\"5&7\u02E2/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E3\"\"5(7\u02E4/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E5\"\"5$7\u02E6/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E7\"\"5$7\u02E8/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E9\"\"5$7\u02EA/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02EB\"\"5#7\u02EC/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02ED\"\"5&7\u02EE/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02EF\"\"5&7\u02F0/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F1\"\"5)7\u02F2/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F3\"\"5&7\u02F4/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F5\"\"5'7\u02F6/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F7\"\"5$7\u02F8/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F9\"\"5#7\u02FA/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02FB\"\"5'7\u02FC/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02FD\"\"5$7\u02FE/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02FF\"\"5$7\u0300/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0301\"\"5$7\u0302/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0303\"\"5%7\u0304/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0305\"\"5&7\u0306/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0307\"\"5\"7\u0308/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0309\"\"5&7\u030A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u030B\"\"5)7\u030C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u030D\"\"5\"7\u030E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u030F\"\"5%7\u0310/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0311\"\"5'7\u0312/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0313\"\"5)7\u0314/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0315\"\"5%7\u0316/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0317\"\"5&7\u0318/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0319\"\"5'7\u031A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u031B\"\"5)7\u031C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u031D\"\"5$7\u031E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u031F\"\"5\"7\u0320/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0321\"\"5&7\u0322/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0323\"\"5$7\u0324/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0325\"\"5#7\u0326/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0327\"\"5$7\u0328/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0329\"\"5$7\u032A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u032B\"\"5%7\u032C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u032D\"\"5%7\u032E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u032F\"\"5'7\u0330/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0331\"\"5\"7\u0332/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0333\"\"5#7\u0334/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0335\"\"5'7\u0336/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\x80\"\"5$7\x81/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0337\"\"5\"7\u0338/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0339\"\"5&7\u033A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u033B\"\"5\"7\u033C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u033D\"\"5\"7\u033E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u033F\"\"5%7\u0340/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0341\"\"5%7\u0342/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0343\"\"5$7\u0344/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0345\"\"5)7\u0346/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0347\"\"5$7\u0348/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0349\"\"5&7\u034A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u034B\"\"5'7\u034C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u034D\"\"5%7\u034E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u034F\"\"5%7\u0350/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0351\"\"5)7\u0352/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0353\"\"5*7\u0354/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0355\"\"5&7\u0356/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0357\"\"5'7\u0358/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0359\"\"5'7\u035A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u035B\"\"5&7\u035C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u035D\"\"5'7\u035E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u035F\"\"5(7\u0360/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0361\"\"5%7\u0362/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0363\"\"5(7\u0364/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0365\"\"5#7\u0366/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0367\"\"5%7\u0368/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0369\"\"5)7\u036A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u036B\"\"5&7\u036C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u036D\"\"5#7\u036E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u036F\"\"5%7\u0370/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0371\"\"5$7\u0372/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0373\"\"5)7\u0374/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0375\"\"5$7\u0376/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0377\"\"5\"7\u0378/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0379\"\"5+7\u037A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u037B\"\"5'7\u037C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u037D\"\"5%7\u037E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u037F\"\"5&7\u0380/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0381\"\"5&7\u0382/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0383\"\"5%7\u0384/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0385\"\"5&7\u0386/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0387\"\"5&7\u0388/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0389\"\"5$7\u038A/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u038B\"\"5'7\u038C/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u038D\"\"5$7\u038E/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u038F\"\"5%7\u0390/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0391\"\"5$7\u0392/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0393\"\"5'7\u0394/8#%<;\u0198=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%;\u023C/' 8!:\u0395!! )"),
    peg$decode(";\u01BC.\u0305 &;\u01BD.\u02FF &;\u01BE.\u02F9 &;\u01BF.\u02F3 &;\u01C0.\u02ED &;\u01C1.\u02E7 &;\u01C2.\u02E1 &;\u01C3.\u02DB &;\u01C4.\u02D5 &;\u01C5.\u02CF &;\u01C6.\u02C9 &;\u01C7.\u02C3 &;\u01C8.\u02BD &;\u01C9.\u02B7 &;\u01CA.\u02B1 &;\u01CB.\u02AB &;\u01CC.\u02A5 &;\u01CD.\u029F &;\u01CE.\u0299 &;\u01CF.\u0293 &;\u01D0.\u028D &;\u01D1.\u0287 &;\u01D2.\u0281 &;\u01D3.\u027B &;\u01D4.\u0275 &;\u01D5.\u026F &;\u01D6.\u0269 &;\u01D7.\u0263 &;\u01D8.\u025D &;\u01D9.\u0257 &;\u01DA.\u0251 &;\u01DB.\u024B &;\u01DC.\u0245 &;\u01DD.\u023F &;\u01DE.\u0239 &;\u01DF.\u0233 &;\u01E0.\u022D &;\u01E1.\u0227 &;\u01E2.\u0221 &;\u01E3.\u021B &;\u01E4.\u0215 &;\u01E5.\u020F &;\u01E6.\u0209 &;\u01E7.\u0203 &;\u01E8.\u01FD &;\u01E9.\u01F7 &;\u01EA.\u01F1 &;\u01EB.\u01EB &;\u01EC.\u01E5 &;\u01ED.\u01DF &;\u01EE.\u01D9 &;\u01EF.\u01D3 &;\u01F0.\u01CD &;\u01F1.\u01C7 &;\u01F2.\u01C1 &;\u01F3.\u01BB &;\u01F4.\u01B5 &;\u01F5.\u01AF &;\u01F6.\u01A9 &;\u01F7.\u01A3 &;\u01F8.\u019D &;\u01F9.\u0197 &;\u01FA.\u0191 &;\u01FB.\u018B &;\u01FC.\u0185 &;\u01FD.\u017F &;\u01FE.\u0179 &;\u01FF.\u0173 &;\u0200.\u016D &;\u0201.\u0167 &;\u0202.\u0161 &;\u0203.\u015B &;\u0204.\u0155 &;\u0205.\u014F &;\u0206.\u0149 &;\u0207.\u0143 &;\u0208.\u013D &;\u0209.\u0137 &;\u020A.\u0131 &;\u020B.\u012B &;\u020C.\u0125 &;\u020D.\u011F &;\u020E.\u0119 &;\u020F.\u0113 &;\u0210.\u010D &;\u0211.\u0107 &;\u0212.\u0101 &;\u0213.\xFB &;\u0214.\xF5 &;\u0215.\xEF &;\u0216.\xE9 &;\u0217.\xE3 &;\u0218.\xDD &;\u0219.\xD7 &;\u021A.\xD1 &;\u021B.\xCB &;\u021C.\xC5 &;\u021D.\xBF &;\u021E.\xB9 &;\u021F.\xB3 &;\u0220.\xAD &;\u0221.\xA7 &;\u0222.\xA1 &;\u0223.\x9B &;\u0225.\x95 &;\u0226.\x8F &;\u0227.\x89 &;\u0228.\x83 &;\u022A.} &;\u022B.w &;\u022C.q &;\u022D.k &;\u022E.e &;\u022F._ &;\u0230.Y &;\u0231.S &;\u0232.M &;\u0233.G &;\u0234.A &;\u0235.; &;\u0236.5 &;\u0237./ &;\u0238.) &;\u0239.# &;\u023A"),
    peg$decode(";\u01BE.\u0167 &;\u01C0.\u0161 &;\u01C1.\u015B &;\u01C3.\u0155 &;\u01C4.\u014F &;\u01C7.\u0149 &;\u01CA.\u0143 &;\u01CD.\u013D &;\u01CF.\u0137 &;\u01D0.\u0131 &;\u01D2.\u012B &;\u01D4.\u0125 &;\u01D5.\u011F &;\u01DB.\u0119 &;\u01DC.\u0113 &;\u01DE.\u010D &;\u01E1.\u0107 &;\u01E2.\u0101 &;\u01E4.\xFB &;\u01E6.\xF5 &;\u01E7.\xEF &;\u01E9.\xE9 &;\u01ED.\xE3 &;\u01EE.\xDD &;\u01F1.\xD7 &;\u01F2.\xD1 &;\u01F6.\xCB &;\u01F7.\xC5 &;\u01FB.\xBF &;\u01FD.\xB9 &;\u01FE.\xB3 &;\u01FF.\xAD &;\u0200.\xA7 &;\u0201.\xA1 &;\u0205.\x9B &;\u0209.\x95 &;\u020A.\x8F &;\u020B.\x89 &;\u020E.\x83 &;\u020F.} &;\u0210.w &;\u0216.q &;\u021A.k &;\u0226.e &;\u0227._ &;\u0228.Y &;\u022B.S &;\u022C.M &;\u022D.G &;\u022F.A &;\u0230.; &;\u0231.5 &;\u0232./ &;\u0234.) &;\u0237.# &;\u0238"),
    peg$decode(";\u023F.. &%;\u0240/& 8!:\u0396! )"),
    peg$decode("<%2\u0398\"\"6\u03987\u0399/\x87#$%%<4\u039A\"\"5!7\u039B=.##&&!&'#/1#1\"\"5!7\u0245/#$+\")(\"'#&'#0M*%%<4\u039A\"\"5!7\u039B=.##&&!&'#/1#1\"\"5!7\u0245/#$+\")(\"'#&'#&/#$+\")(\"'#&'#=.\" 7\u0397"),
    peg$decode("<%;\u0241/5#;\u0245/,$;\u0242/#$+#)(#'#(\"'#&'#=.\" 7\u039C"),
    peg$decode("2\u039D\"\"6\u039D7\u039E"),
    peg$decode("2\u039F\"\"6\u039F7\u03A0"),
    peg$decode("$%%<;\u0242.# &;\u0241=.##&&!&'#/1#1\"\"5!7\u0245/#$+\")(\"'#&'#/P#0M*%%<;\u0242.# &;\u0241=.##&&!&'#/1#1\"\"5!7\u0245/#$+\")(\"'#&'#&&&#"),
    peg$decode(";\u0243.# &;\u0240"),
    peg$decode("%;\u0244/K#$4\u03A1\"\"5!7\u03A2.# &;\u02440/*4\u03A1\"\"5!7\u03A2.# &;\u0244&/#$+\")(\"'#&'#"),
    peg$decode("<%$4\u03A1\"\"5!7\u03A2.# &;\u023E0/*4\u03A1\"\"5!7\u03A2.# &;\u023E&/' 8!:-!! )=.\" 7\u03A3"),
    peg$decode("2\u03A4\"\"6\u03A47\u03A5")
  ];

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$resultsCache = {};

  var peg$ruleNames = ["start", "start_streaming", "stmt_list", "semi_optional", "semi_required", "stmt_list_tail", "type_definition", "type_definition_types", "datatype_custom", "datatype_word_tail", "type_definition_args", "definition_args_loop", "literal_value", "literal_null", "literal_date", "literal_string", "literal_string_single", "literal_string_schar", "literal_blob", "literal_text", "number_sign", "literal_number_signed", "literal_number", "literal_number_decimal", "number_decimal_node", "number_decimal_full", "number_decimal_fraction", "number_decimal_exponent", "literal_number_hex", "number_hex", "number_digit", "bind_parameter", "bind_parameter_numbered", "bind_number_id", "bind_parameter_named", "bind_parameter_tcl", "tcl_suffix", "over_clause", "window_def", "base_window_name", "window_name", "partition_clause", "expression_exists", "expression_exists_ne", "expression_raise", "expression_raise_args", "raise_args_ignore", "raise_args_message", "expression_root", "expression_wrapped", "expression_recur", "expression_unary_collate", "expression_unary", "expression_unary_op", "expression_collate", "expression_concat", "expression_multiply", "expression_multiply_op", "expression_add", "expression_add_op", "expression_shift", "expression_shift_op", "expression_compare", "expression_compare_op", "expression_equiv", "expression_equiv_tails", "expression_equiv_null_op", "expression_equiv_op", "expression_cast", "type_alias", "expression_case", "case_expression", "expression_case_when", "expression_case_else", "expression_postfix", "expression_postfix_tail", "expression_like", "expression_escape", "expression_between", "expression_between_tail", "expression_is_not", "expression_in", "expression_in_target", "expression_list_or_select", "expression_and", "expression", "expression_list", "expression_list_loop", "expression_list_rest", "function_call", "function_call_args", "args_list_distinct", "error_message", "stmt", "stmt_modifier", "modifier_query", "stmt_nodes", "stmt_commit", "stmt_begin", "commit_transaction", "stmt_begin_modifier", "stmt_rollback", "rollback_savepoint", "savepoint_name", "savepoint_alt", "stmt_savepoint", "stmt_release", "stmt_alter", "alter_start", "alter_action", "alter_action_rename", "alter_action_add", "action_add_modifier", "stmt_crud", "stmt_core_with", "clause_with", "clause_with_recursive", "clause_with_tables", "clause_with_loop", "expression_cte", "select_alias", "select_wrapped", "stmt_select_full", "stmt_sqlite", "stmt_attach", "attach_arg", "stmt_detach", "stmt_vacuum", "vacuum_target", "stmt_analyze", "analyze_arg", "stmt_reindex", "reindex_arg", "stmt_pragma", "pragma_expression", "pragma_value", "pragma_value_literal", "pragma_value_bool", "pragma_bool_id", "pragma_value_name", "stmt_crud_types", "stmt_select", "stmt_core_order", "stmt_core_limit", "stmt_core_limit_offset", "limit_offset_variant", "limit_offset_variant_name", "select_loop", "select_loop_union", "select_parts", "select_parts_core", "select_core_select", "select_modifier", "select_modifier_distinct", "select_modifier_all", "select_target", "select_target_loop", "select_core_from", "stmt_core_where", "select_core_group", "select_core_having", "select_node", "select_node_star", "select_node_star_qualified", "select_node_aliased", "select_source", "source_loop_tail", "select_cross_clause", "select_join_clause", "table_or_sub", "table_or_sub_func", "table_qualified", "table_qualified_id", "table_or_sub_index_node", "index_node_indexed", "index_node_none", "table_or_sub_sub", "table_or_sub_select", "alias", "join_operator", "join_operator_natural", "join_operator_types", "operator_types_hand", "types_hand_outer", "operator_types_misc", "join_condition", "join_condition_on", "join_condition_using", "select_parts_values", "stmt_core_order_list", "stmt_core_order_list_loop", "stmt_core_order_list_item", "select_star", "stmt_fallback_types", "stmt_insert", "insert_keyword", "insert_keyword_ins", "insert_keyword_repl", "insert_keyword_mod", "insert_target", "insert_into", "insert_into_start", "insert_results", "loop_columns", "loop_column_tail", "loop_name", "insert_value", "insert_value_start", "insert_values_list", "insert_values_loop", "expression_list_wrapped", "insert_default", "operator_compound", "compound_union", "compound_union_all", "stmt_update", "update_start", "update_fallback", "update_set", "update_columns", "update_columns_tail", "update_column", "stmt_delete", "delete_start", "stmt_create", "create_start", "create_table_only", "create_index_only", "create_trigger_only", "create_view_only", "create_virtual_only", "create_table", "create_table_start", "create_core_tmp", "create_core_ine", "create_table_source", "table_source_def", "source_def_rowid", "source_def_loop", "source_def_tail", "source_tbl_loop", "source_def_column", "source_def_name", "column_type", "column_constraints", "column_constraint_tail", "column_constraint", "constraint_name", "constraint_name_loop", "column_constraint_types", "column_constraint_foreign", "column_constraint_primary", "col_primary_start", "col_primary_auto", "column_constraint_null", "constraint_null_types", "constraint_null_value", "column_constraint_check", "column_constraint_default", "column_default_values", "column_constraint_collate", "table_constraint", "table_constraint_types", "table_constraint_check", "table_constraint_primary", "primary_start", "primary_start_normal", "primary_start_unique", "primary_columns", "primary_columns_index", "primary_columns_table", "primary_column_tail", "primary_column", "primary_column_types", "column_collate", "column_collate_loop", "primary_column_dir", "primary_conflict", "primary_conflict_start", "constraint_check", "table_constraint_foreign", "foreign_start", "foreign_clause", "foreign_references", "foreign_actions", "foreign_actions_tail", "foreign_action", "foreign_action_on", "action_on_action", "on_action_set", "on_action_cascade", "on_action_none", "foreign_action_match", "foreign_deferrable", "deferrable_initially", "table_source_select", "create_index", "create_index_start", "index_unique", "index_on", "create_trigger", "create_trigger_start", "trigger_conditions", "trigger_apply_mods", "trigger_apply_instead", "trigger_do", "trigger_do_on", "trigger_do_update", "do_update_of", "do_update_columns", "trigger_foreach", "trigger_when", "trigger_action", "action_loop", "action_loop_stmt", "create_view", "id_view_expression", "create_view_start", "create_as_select", "create_virtual", "create_virtual_start", "virtual_module", "virtual_args", "virtual_args_loop", "virtual_args_tail", "virtual_arg_types", "virtual_column_name", "stmt_drop", "drop_start", "drop_types", "drop_ie", "binary_concat", "binary_plus", "binary_minus", "binary_multiply", "binary_divide", "binary_mod", "binary_left", "binary_right", "binary_and", "binary_or", "binary_lt", "binary_gt", "binary_lte", "binary_gte", "binary_equal", "binary_notequal_a", "binary_notequal_b", "binary_lang_isnt", "id_name", "id_database", "id_function", "id_table", "id_table_qualified", "id_column", "column_unqualified", "column_qualifiers", "id_column_qualified", "id_collation", "id_savepoint", "id_index", "id_trigger", "id_view", "id_pragma", "id_cte", "id_table_expression", "id_constraint_table", "id_constraint_column", "datatype_types", "datatype_text", "datatype_real", "datatype_real_double", "datatype_numeric", "datatype_integer", "datatype_integer_fp", "datatype_none", "name_char", "unicode_char", "name", "name_quoted", "name_unquoted", "name_reserved", "name_bracketed", "bracket_terminator", "name_dblquoted", "name_sglquoted", "name_backticked", "sym_bopen", "sym_bclose", "sym_popen", "sym_pclose", "sym_comma", "sym_dot", "sym_star", "sym_quest", "sym_sglquote", "sym_dblquote", "sym_backtick", "sym_tilde", "sym_plus", "sym_minus", "sym_equal", "sym_amp", "sym_pipe", "sym_mod", "sym_lt", "sym_gt", "sym_excl", "sym_semi", "sym_colon", "sym_fslash", "sym_bslash", "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ATTACH", "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", "CASCADE", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "COMMIT", "CONFLICT", "CONSTRAINT", "CREATE", "CROSS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", "DESC", "DETACH", "DISTINCT", "DROP", "EACH", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUSIVE", "EXISTS", "EXPLAIN", "FAIL", "FOR", "FOREIGN", "FROM", "FULL", "GLOB", "GROUP", "HAVING", "IF", "IGNORE", "IMMEDIATE", "IN", "INDEX", "INDEXED", "INITIALLY", "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "KEY", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL", "NO", "NOT", "NOTNULL", "NULL", "OF", "OFFSET", "ON", "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PLAN", "PRAGMA", "PRIMARY", "QUERY", "RAISE", "RECURSIVE", "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "RENAME", "REPLACE", "RESTRICT", "RIGHT", "ROLLBACK", "ROW", "ROWID", "SAVEPOINT", "SELECT", "SET", "TABLE", "TEMP", "TEMPORARY", "THEN", "TO", "TRANSACTION", "TRIGGER", "UNION", "UNIQUE", "UPDATE", "USING", "VACUUM", "VALUES", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WITH", "WITHOUT", "reserved_words", "reserved_word_list", "reserved_critical_list", "comment", "comment_line", "comment_block", "comment_block_start", "comment_block_end", "comment_block_body", "block_body_nodes", "comment_block_feed", "o", "_TODO_"];
  var peg$descNames = [null, null, null, null, null, null, "Type Definition", null, "Custom Datatype Name", null, "Type Definition Arguments", null, null, "Null Literal", "Date Literal", "String Literal", "Single-quoted String Literal", null, "Blob Literal", null, "Number Sign", null, null, null, "Decimal Literal", null, null, "Decimal Literal Exponent", "Hexidecimal Literal", null, null, "Bind Parameter", "Numbered Bind Parameter", null, "Named Bind Parameter", "TCL Bind Parameter", null, "Window Function's Over Clause", null, null, null, "Partition By clause", "EXISTS Expression", "EXISTS Keyword", "RAISE Expression", "RAISE Expression Arguments", "IGNORE Keyword", null, null, null, null, null, null, null, "COLLATE Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, "CAST Expression", "Type Alias", "CASE Expression", null, "WHEN Clause", "ELSE Clause", null, null, "Comparison Expression", "ESCAPE Expression", "BETWEEN Expression", null, null, "IN Expression", null, null, null, null, "Expression List", null, null, "Function Call", "Function Call Arguments", null, "Error Message", "Statement", "QUERY PLAN", "QUERY PLAN Keyword", null, "END Transaction Statement", "BEGIN Transaction Statement", null, null, "ROLLBACK Statement", "TO Clause", null, null, "SAVEPOINT Statement", "RELEASE Statement", "ALTER TABLE Statement", "ALTER TABLE Keyword", null, "RENAME TO Keyword", "ADD COLUMN Keyword", null, null, "WITH Clause", null, null, null, null, "Common Table Expression", null, null, null, null, "ATTACH Statement", null, "DETACH Statement", "VACUUM Statement", null, "ANALYZE Statement", null, "REINDEX Statement", null, "PRAGMA Statement", null, null, null, null, null, null, null, "SELECT Statement", "ORDER BY Clause", "LIMIT Clause", "OFFSET Clause", null, null, null, "Union Operation", null, null, "SELECT Results Clause", "SELECT Results Modifier", null, null, null, null, "FROM Clause", "WHERE Clause", "GROUP BY Clause", "HAVING Clause", null, null, null, null, null, null, "CROSS JOIN Operation", "JOIN Operation", null, null, "Qualified Table", "Qualified Table Identifier", "Qualfied Table Index", null, null, "SELECT Source", "Subquery", "Alias", "JOIN Operator", null, null, null, null, null, "JOIN Constraint", "Join ON Clause", "Join USING Clause", "VALUES Clause", null, null, "Ordering Expression", "Star", "Fallback Type", "INSERT Statement", null, "INSERT Keyword", "REPLACE Keyword", "INSERT OR Modifier", null, "INTO Clause", "INTO Keyword", "VALUES Clause", "Column List", null, "Column Name", "VALUES Clause", "VALUES Keyword", null, null, "Wrapped Expression List", "DEFAULT VALUES Clause", "Compound Operator", "UNION Operator", null, "UPDATE Statement", "UPDATE Keyword", "UPDATE OR Modifier", "SET Clause", null, null, "Column Assignment", "DELETE Statement", "DELETE Keyword", "CREATE Statement", null, null, null, null, null, null, "CREATE TABLE Statement", null, null, "IF NOT EXISTS Modifier", null, "Table Definition", null, null, null, null, "Column Definition", null, "Column Datatype", null, null, "Column Constraint", null, "CONSTRAINT Name", null, "FOREIGN KEY Column Constraint", "PRIMARY KEY Column Constraint", "PRIMARY KEY Keyword", "AUTOINCREMENT Keyword", null, "UNIQUE Column Constraint", "NULL Column Constraint", "CHECK Column Constraint", "DEFAULT Column Constraint", null, "COLLATE Column Constraint", "Table Constraint", null, "CHECK Table Constraint", "PRIMARY KEY Table Constraint", null, "PRIMARY KEY Keyword", "UNIQUE Keyword", null, null, null, null, "Indexed Column", null, "Collation", null, "Column Direction", null, "ON CONFLICT Keyword", null, "FOREIGN KEY Table Constraint", "FOREIGN KEY Keyword", null, "REFERENCES Clause", null, null, "FOREIGN KEY Action Clause", null, "FOREIGN KEY Action", null, null, null, null, "DEFERRABLE Clause", null, null, "CREATE INDEX Statement", null, null, "ON Clause", "CREATE TRIGGER Statement", null, "Conditional Clause", null, null, "Conditional Action", null, null, null, null, null, "WHEN Clause", "Actions Clause", null, null, "CREATE VIEW Statement", null, null, null, "CREATE VIRTUAL TABLE Statement", null, null, "Module Arguments", null, null, null, null, "DROP Statement", "DROP Keyword", "DROP Type", "IF EXISTS Keyword", "Or", "Add", "Subtract", "Multiply", "Divide", "Modulo", "Shift Left", "Shift Right", "Logical AND", "Logical OR", "Less Than", "Greater Than", "Less Than Or Equal", "Greater Than Or Equal", "Equal", "Not Equal", "Not Equal", "IS", "Identifier", "Database Identifier", "Function Identifier", "Table Identifier", null, "Column Identifier", null, null, null, "Collation Identifier", "Savepoint Identifier", "Index Identifier", "Trigger Identifier", "View Identifier", "Pragma Identifier", "CTE Identifier", null, "Table Constraint Identifier", "Column Constraint Identifier", "Datatype Name", "TEXT Datatype Name", "REAL Datatype Name", "DOUBLE Datatype Name", "NUMERIC Datatype Name", "INTEGER Datatype Name", null, "BLOB Datatype Name", null, null, null, null, null, null, null, null, null, null, null, "Open Bracket", "Close Bracket", "Open Parenthesis", "Close Parenthesis", "Comma", "Period", "Asterisk", "Question Mark", "Single Quote", "Double Quote", "Backtick", "Tilde", "Plus", "Minus", "Equal", "Ampersand", "Pipe", "Modulo", "Less Than", "Greater Than", "Exclamation", "Semicolon", "Colon", "Forward Slash", "Backslash", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Line Comment", "Block Comment", null, null, null, null, null, "Whitespace", null];

  var peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer();

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    return s.split("").map(function(ch) { return ch.charCodeAt(0) - 32; });
  }

  function peg$parseRule(index) {
    var bc = peg$bytecode[index];
    var ip = 0;
    var ips = [];
    var end = bc.length;
    var ends = [];
    var stack = [];
    var startPos = peg$currPos;
    var params;

    peg$tracer.trace({
      type: "rule.enter",
      rule: peg$ruleNames[index],
      description: peg$descNames[index],
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 552 + index;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: peg$ruleNames[index],
        description: peg$descNames[index],
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: peg$ruleNames[index],
        description: peg$descNames[index],
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(undefined);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3])
              .map(function(p) { return stack[stack.length - 1 - p]; });

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

    if (stack[0] !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: peg$ruleNames[index],
        description: peg$descNames[index],
        result: stack[0],
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: peg$ruleNames[index],
        description: peg$descNames[index],
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return stack[0];
  }


    function makeArray(arr) {
      if (!isOkay(arr)) {
        return [];
      }
      return !Array.isArray(arr) ? [arr] : arr;
    }

    function isOkay(obj) {
      return obj != null;
    }

    function foldString(parts, glue = ' ') {
      const folded = parts
      .filter((part) => isOkay(part))
      .reduce((prev, cur) => {
        return `${prev}${nodeToString(cur)}${glue}`;
      }, '');
      return folded.trim();
    }

    function foldStringWord(parts) {
      return foldString(parts, '');
    }

    function foldStringKey(parts) {
      return foldString(parts).toLowerCase();
    }

    function flattenAll(arr) {
      return arr
      .filter((part) => isOkay(part))
      .reduce((prev, cur) => prev.concat(cur), []);
    }

    function unescape(str, quoteChar = '\'') {
      const re = new RegExp(`${quoteChar}{2}`, 'g');
      return nodeToString(str).replace(re, quoteChar);
    }

    function nodeToString(node = []) {
      return makeArray(node).join('');
    }

    /*
     * A text node has
     * - no leading or trailing whitespace
     */
    function textNode(node) {
      return nodeToString(node).trim();
    }

    function keyNode(node) {
      return textNode(node).toLowerCase();
    }

    function isArrayOkay(arr) {
      return Array.isArray(arr) && arr.length > 0 && isOkay(arr[0]);
    }

    function composeBinary(first, rest) {
      return rest
      .reduce((left, [ x, operation, y, right ]) => {
        return {
          'type': 'expression',
          'format': 'binary',
          'variant': 'operation',
          'operation': keyNode(operation),
          'left': left,
          'right': right
        };
      }, first);
    }


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  DefaultTracer: peg$DefaultTracer,
  parse: peg$parse
};
